;; Connected to nREPL server - nrepl://localhost:8202
;; CIDER 0.22.0snapshot (package: 20190329.1924), nREPL 0.6.0
;; Clojure 1.10.0, Java 1.8.0_191
;;     Docs: (doc function-name)
;;           (find-doc part-of-name)
;;   Source: (source function-name)
;;  Javadoc: (javadoc java-object-or-class)
;;     Exit: <C-c C-q>
;;  Results: Stored in vars *1, *2, *3, an exception in *e;
;; ======================================================================
;; If you’re new to CIDER it is highly recommended to go through its
;; manual first. Type <M-x cider-view-manual> to view it.
;; In case you’re seeing any warnings you should consult the manual’s
;; "Troubleshooting" section.
;;
;; Here are few tips to get you started:
;;
;; * Press <C-h m> to see a list of the keybindings available (this
;;   will work in every Emacs buffer)
;; * Press <, ,> to quickly invoke some REPL command
;; * Press <, s s> to switch between the REPL and a Clojure file
;; * Press <M-x cider-find-var> to jump to the source of something (e.g. a var, a
;;   Java method)
;; * Press <, h h> to view the documentation for something (e.g.
;;   a var, a Java method)
;; * Enable ‘eldoc-mode’ to display function & method signatures in the minibuffer.
;; * Print CIDER’s refcard and keep it close to your keyboard.
;;
;; CIDER is super customizable - try <M-x customize-group cider> to
;; get a feel for this. If you’re thirsty for knowledge you should try
;; <M-x cider-drink-a-sip>.
;;
;; If you think you’ve encountered a bug (or have some suggestions for
;; improvements) use <M-x cider-report-bug> to report it.
;;
;; Above all else - don’t panic! In case of an emergency - procure
;; some (hard) cider and enjoy it responsibly!
;;
;; You can remove this message with the <M-x cider-repl-clear-help-banner> command.
;; You can disable it from appearing on start by setting
;; ‘cider-repl-display-help-banner’ to nil.
;; ======================================================================
WARNING: No Clojure project was detected. The
refactor-nrepl middleware was not enabled. (You can mute this
warning by customizing `cljr-suppress-no-project-warning'.)To quit, type: :cljs/quit
[:selected :app]
shadow.user> 
cljs.user> (+ 1 1)
2
cljs.user> (:patterns @re-frame.db/app-db)
[{:id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :label "an example pattern", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :templates [{:id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "do something in time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :start {:hour 12, :minute 30}, :stop {:hour 14, :minute 0}}]}][:app] Compiling ...
[:app] Build completed. (176 files, 2 compiled, 0 warnings, 0.47s)

cljs.user> (+ 1 1)
2
cljs.user> (ns time-align-mobile.handlers)
time-align-mobile.handlers
time-align-mobile.handlers> (defn delete-template [{:keys [db]} [_ id]]
  {:db (->> db
            (setval [:patterns sp/ALL :templates sp/ALL #(= id (:id %))] sp/NONE)
            (setval [:forms :template-form] nil)
            (setval [:forms :pattern-form] nil))
   ;; TODO pop stack when possible
   :dispatch [:navigate-to {:current-screen :templates}]})
#'time-align-mobile.handlers/delete-template
time-align-mobile.handlers> (delete-template {:db @re-frame.db/app-db} [:no-op #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647"])
{:db {:active-filter nil, :time-navigators {:day #inst "2019-04-18T01:12:40.195-00:00", :calendar #inst "2019-04-18T01:12:40.195-00:00", :report #inst "2019-04-18T01:12:40.195-00:00"}, :now #inst "2019-04-18T01:17:57.743-00:00", :config {:auto-log-time-align true}, :filters [{:id #uuid "bbc34081-38d4-4d4f-ab19-a7cef18c1212", :label "sort by bucket label", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort {:path [:bucket-label], :ascending true}, :predicates []} {:id #uuid "aad94081-38d4-4d4f-ab19-a7cef18c1299", :label "sort by label", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:bucket :filter :period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort {:path [:label], :ascending true}, :predicates []} {:id #uuid "cccc4081-38d4-4d4f-ab19-a7cef18c4444", :label "time align bucket filter", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort nil, :predicates [{:path [:bucket-id], :value "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :negate false}]}], :patterns [{:id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :label "an example pattern", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :templates []}], :navigation {:current-screen :day, :params nil}, :period-in-play-id #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :buckets [{:id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :color "#11aa11", :periods [{:id #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :label "start using", :planned false, :start #inst "2019-04-18T01:12:40.195-00:00", :stop #inst "2019-04-18T01:17:57.743-00:00", :data {}}]}], :selected-period #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :forms {:bucket-form nil, :period-form nil, :pattern-form nil, :template-form nil, :filter-form nil}}, :dispatch [:navigate-to {:current-screen :templates}]}
time-align-mobile.handlers> (:patterns (delete-template {:db @re-frame.db/app-db} [:no-op #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647"]))
nil
time-align-mobile.handlers> (get-in (delete-template {:db @re-frame.db/app-db} [:no-op #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647"]) [:db :patterns])
[{:id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :label "an example pattern", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :templates []}]
time-align-mobile.handlers> (defn load-template-form [db [_ template-id]]
  (let [[pattern template] (select-one
                            [:patterns sp/ALL
                             (sp/collect-one (sp/submap [:id]))
                             :templates sp/ALL #(= (:id %) template-id)] db)
        bucket             (select-one [:buckets sp/ALL
                                        #(= (:bucket-id template) (:id %))] db)
        external-data      {:pattern-id   (:id pattern)
                            :bucket-color (:color bucket)
                            :bucket-label (:label bucket)}
        template-form      (merge template
                                  external-data
                                  {:data (helpers/print-data (:data template))})]

    (assoc-in db [:forms :template-form] template-form)))
#'time-align-mobile.handlers/load-template-form
time-align-mobile.handlers> (get-in @re-frame.db/app-db [:forms :template-form])
nil
time-align-mobile.handlers> (get-in @re-frame.db/app-db [:forms ])
{:bucket-form nil, :period-form nil, :pattern-form nil, :template-form nil, :filter-form nil}
time-align-mobile.handlers> (get-in (load-template-form @re-frame.db/app-db [:no-op #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647"]) [:forms :template-form])
{:bucket-label "time align", :start {:hour 12, :minute 30}, :pattern-id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "do something in time align", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :bucket-color "#11aa11", :data "{}"}
time-align-mobile.handlers> (keys (get-in (load-template-form @re-frame.db/app-db [:no-op #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647"]) [:forms :template-form]))
(:bucket-label :start :pattern-id :created :stop :label :id :last-edited :bucket-id :bucket-color :data)
time-align-mobile.handlers> (defn save-template-form [{:keys [db]} [_ date-time]]
  (let [template-form (get-in db [:forms :template-form])]
    (try
      (let [new-data            (read-string (:data template-form))
            keys-wanted         (->> template-form
                                     (keys)
                                     (remove #(or (= :bucket-id %)
                                                  (= :bucket-label %)
                                                  (= :bucket-color %)
                                                  (= :pattern-id))))
            new-template        (-> template-form
                                    (merge {:data        new-data
                                            :last-edited date-time})
                                    (select-keys keys-wanted))
            [old-pattern
             old-template]      (select-one [:patterns sp/ALL
                                             (sp/collect-one (sp/submap [:id]))
                                             :templates sp/ALL
                                             #(= (:id %) (:id new-template))] db)
            removed-template-db (setval [:patterns sp/ALL
                                         #(= (:id %) (:id old-pattern))
                                         :templates sp/ALL
                                         #(= (:id %) (:id old-template))]
                                        sp/NONE db)
            new-db              (setval [:patterns sp/ALL
                                         #(= (:id %) (:pattern-id template-form))
                                         :templates
                                         sp/NIL->VECTOR
                                         sp/AFTER-ELEM]
                                        new-template removed-template-db)]

        {:db       new-db
         ;; load template form so that the data string gets re-formatted prettier
         :dispatch [:load-template-form (:id new-template)]})
      (catch js/Error e
        {:db    db
         :alert (str "Failed data read validation " e)}))))
#'time-align-mobile.handlers/save-template-form
time-align-mobile.handlers> (setval [:forms :template-form :label] "new label" (load-template-form @re-frame.db/app-db [:no-op #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647"]))
{:active-filter nil, :time-navigators {:day #inst "2019-04-18T01:12:40.195-00:00", :calendar #inst "2019-04-18T01:12:40.195-00:00", :report #inst "2019-04-18T01:12:40.195-00:00"}, :now #inst "2019-04-18T01:48:28.902-00:00", :config {:auto-log-time-align true}, :filters [{:id #uuid "bbc34081-38d4-4d4f-ab19-a7cef18c1212", :label "sort by bucket label", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort {:path [:bucket-label], :ascending true}, :predicates []} {:id #uuid "aad94081-38d4-4d4f-ab19-a7cef18c1299", :label "sort by label", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:bucket :filter :period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort {:path [:label], :ascending true}, :predicates []} {:id #uuid "cccc4081-38d4-4d4f-ab19-a7cef18c4444", :label "time align bucket filter", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort nil, :predicates [{:path [:bucket-id], :value "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :negate false}]}], :patterns [{:id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :label "an example pattern", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :templates [{:id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "do something in time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :start {:hour 12, :minute 30}, :stop {:hour 14, :minute 0}}]}], :navigation {:current-screen :day, :params nil}, :period-in-play-id #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :buckets [{:id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :color "#11aa11", :periods [{:id #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :label "start using", :planned false, :start #inst "2019-04-18T01:12:40.195-00:00", :stop #inst "2019-04-18T01:48:28.902-00:00", :data {}}]}], :selected-period #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :forms {:bucket-form nil, :period-form nil, :pattern-form nil, :template-form {:bucket-label "time align", :start {:hour 12, :minute 30}, :pattern-id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "new label", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :bucket-color "#11aa11", :data "{}"}, :filter-form nil}}
time-align-mobile.handlers> (def new-app-db (setval [:forms :template-form :label] "new label" (load-template-form @re-frame.db/app-db [:no-op #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647"])))
#'time-align-mobile.handlers/new-app-db
time-align-mobile.handlers> (get-in @re-frame.db/app-db [:forms :template-form :label])
nil
time-align-mobile.handlers> (get-in new-app-db [:forms :template-form :label])
"new label"
time-align-mobile.handlers> (select-one [:patterns sp/ALL :templates sp/FIRST :label] new-app-db)
"do something in time align"
time-align-mobile.handlers> (save-template-form {:db new-app-db} [:no-op (js/Date.)])
{:db {:active-filter nil, :time-navigators {:day #inst "2019-04-18T01:12:40.195-00:00", :calendar #inst "2019-04-18T01:12:40.195-00:00", :report #inst "2019-04-18T01:12:40.195-00:00"}, :now #inst "2019-04-18T01:49:12.105-00:00", :config {:auto-log-time-align true}, :filters [{:id #uuid "bbc34081-38d4-4d4f-ab19-a7cef18c1212", :label "sort by bucket label", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort {:path [:bucket-label], :ascending true}, :predicates []} {:id #uuid "aad94081-38d4-4d4f-ab19-a7cef18c1299", :label "sort by label", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:bucket :filter :period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort {:path [:label], :ascending true}, :predicates []} {:id #uuid "cccc4081-38d4-4d4f-ab19-a7cef18c4444", :label "time align bucket filter", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort nil, :predicates [{:path [:bucket-id], :value "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :negate false}]}], :patterns [{:id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :label "an example pattern", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :templates [{:id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "do something in time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :start {:hour 12, :minute 30}, :stop {:hour 14, :minute 0}} {}]}], :navigation {:current-screen :day, :params nil}, :period-in-play-id #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :buckets [{:id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :color "#11aa11", :periods [{:id #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :label "start using", :planned false, :start #inst "2019-04-18T01:12:40.195-00:00", :stop #inst "2019-04-18T01:49:12.105-00:00", :data {}}]}], :selected-period #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :forms {:bucket-form nil, :period-form nil, :pattern-form nil, :template-form {:bucket-label "time align", :start {:hour 12, :minute 30}, :pattern-id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "new label", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :bucket-color "#11aa11", :data "{}"}, :filter-form nil}}, :dispatch [:load-template-form nil]}
time-align-mobile.handlers> (def result-db (save-template-form {:db new-app-db} [:no-op (js/Date.)]))
#'time-align-mobile.handlers/result-db
time-align-mobile.handlers> (select-one [:patterns sp/ALL :templates sp/FIRST :label] new-app-db)
"do something in time align"
time-align-mobile.handlers> (select-one [:patterns sp/ALL :templates sp/FIRST :label] result-db)
nil
time-align-mobile.handlers> (save-template-form {:db new-app-db} [:no-op (js/Date.)])
{:db {:active-filter nil, :time-navigators {:day #inst "2019-04-18T01:12:40.195-00:00", :calendar #inst "2019-04-18T01:12:40.195-00:00", :report #inst "2019-04-18T01:12:40.195-00:00"}, :now #inst "2019-04-18T01:49:12.105-00:00", :config {:auto-log-time-align true}, :filters [{:id #uuid "bbc34081-38d4-4d4f-ab19-a7cef18c1212", :label "sort by bucket label", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort {:path [:bucket-label], :ascending true}, :predicates []} {:id #uuid "aad94081-38d4-4d4f-ab19-a7cef18c1299", :label "sort by label", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:bucket :filter :period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort {:path [:label], :ascending true}, :predicates []} {:id #uuid "cccc4081-38d4-4d4f-ab19-a7cef18c4444", :label "time align bucket filter", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort nil, :predicates [{:path [:bucket-id], :value "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :negate false}]}], :patterns [{:id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :label "an example pattern", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :templates [{:id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "do something in time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :start {:hour 12, :minute 30}, :stop {:hour 14, :minute 0}} {}]}], :navigation {:current-screen :day, :params nil}, :period-in-play-id #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :buckets [{:id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :color "#11aa11", :periods [{:id #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :label "start using", :planned false, :start #inst "2019-04-18T01:12:40.195-00:00", :stop #inst "2019-04-18T01:49:12.105-00:00", :data {}}]}], :selected-period #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :forms {:bucket-form nil, :period-form nil, :pattern-form nil, :template-form {:bucket-label "time align", :start {:hour 12, :minute 30}, :pattern-id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "new label", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :bucket-color "#11aa11", :data "{}"}, :filter-form nil}}, :dispatch [:load-template-form nil]}
time-align-mobile.handlers> (select-one [:db :patterns sp/ALL :templates sp/FIRST :label] result-db)
"do something in time align"
time-align-mobile.handlers> (get-in new-app-db [:forms :template-form])
{:bucket-label "time align", :start {:hour 12, :minute 30}, :pattern-id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "new label", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :bucket-color "#11aa11", :data "{}"}
time-align-mobile.handlers> (defn save-template-form [{:keys [db]} [_ date-time]]
  (let [template-form (get-in db [:forms :template-form])]
    (try
      (let [new-data            (read-string (:data template-form))
            keys-wanted         (->> template-form
                                     (keys)
                                     (remove #(or (= :bucket-id %)
                                                  (= :bucket-label %)
                                                  (= :bucket-color %)
                                                  (= :pattern-id))))
            new-template        (-> template-form
                                    (merge {:data        new-data
                                            :last-edited date-time})
                                    (select-keys keys-wanted))
            [old-pattern
             old-template]      (select-one [:patterns sp/ALL
                                             (sp/collect-one (sp/submap [:id]))
                                             :templates sp/ALL
                                             #(= (:id %) (:id new-template))] db)
            removed-template-db (setval [:patterns sp/ALL
                                         #(= (:id %) (:id old-pattern))
                                         :templates sp/ALL
                                         #(= (:id %) (:id old-template))]
                                        sp/NONE db)
            new-db              (setval [:patterns sp/ALL
                                         #(= (:id %) (:pattern-id template-form))
                                         :templates
                                         sp/NIL->VECTOR
                                         sp/AFTER-ELEM]
                                        new-template removed-template-db)]

        {:new-data new-data
         :keys-wanted keys-wanted
         :new-template new-template
         :old-pattern old-pattern
         :old-template old-template
         :removed-template-db (select-one [:patterns sp/ALL :templates sp/ALL] removed-template-db)
         :new-db (select-one [:patterns sp/ALL :templates sp/ALL] new-db)}
        ;; {:db       new-db
        ;;  ;; load template form so that the data string gets re-formatted prettier
        ;;  :dispatch [:load-template-form (:id new-template)]}
        )
      (catch js/Error e
        {:db    db
         :alert (str "Failed data read validation " e)}))))
#'time-align-mobile.handlers/save-template-form
time-align-mobile.handlers> (save-template-form {:db new-app-db} [:no-op (js/Date.)])
{:db {:active-filter nil, :time-navigators {:day #inst "2019-04-18T01:12:40.195-00:00", :calendar #inst "2019-04-18T01:12:40.195-00:00", :report #inst "2019-04-18T01:12:40.195-00:00"}, :now #inst "2019-04-18T01:49:12.105-00:00", :config {:auto-log-time-align true}, :filters [{:id #uuid "bbc34081-38d4-4d4f-ab19-a7cef18c1212", :label "sort by bucket label", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort {:path [:bucket-label], :ascending true}, :predicates []} {:id #uuid "aad94081-38d4-4d4f-ab19-a7cef18c1299", :label "sort by label", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:bucket :filter :period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort {:path [:label], :ascending true}, :predicates []} {:id #uuid "cccc4081-38d4-4d4f-ab19-a7cef18c4444", :label "time align bucket filter", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort nil, :predicates [{:path [:bucket-id], :value "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :negate false}]}], :patterns [{:id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :label "an example pattern", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :templates [{:id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "do something in time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :start {:hour 12, :minute 30}, :stop {:hour 14, :minute 0}}]}], :navigation {:current-screen :day, :params nil}, :period-in-play-id #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :buckets [{:id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :color "#11aa11", :periods [{:id #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :label "start using", :planned false, :start #inst "2019-04-18T01:12:40.195-00:00", :stop #inst "2019-04-18T01:49:12.105-00:00", :data {}}]}], :selected-period #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :forms {:bucket-form nil, :period-form nil, :pattern-form nil, :template-form {:bucket-label "time align", :start {:hour 12, :minute 30}, :pattern-id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "new label", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :bucket-color "#11aa11", :data "{}"}, :filter-form nil}}, :alert "Failed data read validation Error: More than one element found in structure: {}"}
time-align-mobile.handlers> (+ 1 1)
2
time-align-mobile.handlers> (js/Date.)
#inst "2019-04-18T14:07:21.407-00:00"
time-align-mobile.handlers> (get-in (load-template-form @re-frame.db/app-db [:no-op #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647"]) [:forms :template-form])
{:bucket-label "time align", :start {:hour 12, :minute 30}, :pattern-id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "do something in time align", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :bucket-color "#11aa11", :data "{}"}
time-align-mobile.handlers> (helpers/print-data {})
"{}"
time-align-mobile.handlers> (read-string "{}")

{}
time-align-mobile.handlers> (defn save-template-form [{:keys [db]} [_ date-time]]
  (let [template-form (get-in db [:forms :template-form])]
    (try
      (let [new-data            (read-string (:data template-form))
            keys-wanted         (->> template-form
                                     (keys)
                                     (remove #(or (= :bucket-id %)
                                                  (= :bucket-label %)
                                                  (= :bucket-color %)
                                                  (= :pattern-id))))
            new-template        (-> template-form
                                    (merge {:data        new-data
                                            :last-edited date-time})
                                    (select-keys keys-wanted))
            [old-pattern
             old-template]      (select-one [:patterns sp/ALL
                                             (sp/collect-one (sp/submap [:id]))
                                             :templates sp/ALL
                                             #(= (:id %) (:id new-template))] db)
            removed-template-db (setval [:patterns sp/ALL
                                         #(= (:id %) (:id old-pattern))
                                         :templates sp/ALL
                                         #(= (:id %) (:id old-template))]
                                        sp/NONE db)
            new-db              (setval [:patterns sp/ALL
                                         #(= (:id %) (:pattern-id template-form))
                                         :templates
                                         sp/NIL->VECTOR
                                         sp/AFTER-ELEM]
                                        new-template removed-template-db)]

        {:new-data new-data
         :keys-wanted keys-wanted
         :new-template new-template
         :old-pattern old-pattern
         :old-template old-template
         :removed-template-db (select-one [:patterns sp/ALL :templates sp/ALL] removed-template-db)
         :new-db (select-one [:patterns sp/ALL :templates sp/ALL] new-db)}
        ;; {:db       new-db
        ;;  ;; load template form so that the data string gets re-formatted prettier
        ;;  :dispatch [:load-template-form (:id new-template)]}
        )
      (catch js/Error e
        {:db    db
         :alert (str "Failed data read validation " e)}))))
#'time-align-mobile.handlers/save-template-form
time-align-mobile.handlers> (save-template-form {:db new-app-db} [:no-op (js/Date.)])
{:db {:active-filter nil, :time-navigators {:day #inst "2019-04-18T01:12:40.195-00:00", :calendar #inst "2019-04-18T01:12:40.195-00:00", :report #inst "2019-04-18T01:12:40.195-00:00"}, :now #inst "2019-04-18T01:49:12.105-00:00", :config {:auto-log-time-align true}, :filters [{:id #uuid "bbc34081-38d4-4d4f-ab19-a7cef18c1212", :label "sort by bucket label", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort {:path [:bucket-label], :ascending true}, :predicates []} {:id #uuid "aad94081-38d4-4d4f-ab19-a7cef18c1299", :label "sort by label", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:bucket :filter :period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort {:path [:label], :ascending true}, :predicates []} {:id #uuid "cccc4081-38d4-4d4f-ab19-a7cef18c4444", :label "time align bucket filter", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort nil, :predicates [{:path [:bucket-id], :value "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :negate false}]}], :patterns [{:id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :label "an example pattern", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :templates [{:id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "do something in time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :start {:hour 12, :minute 30}, :stop {:hour 14, :minute 0}}]}], :navigation {:current-screen :day, :params nil}, :period-in-play-id #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :buckets [{:id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :color "#11aa11", :periods [{:id #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :label "start using", :planned false, :start #inst "2019-04-18T01:12:40.195-00:00", :stop #inst "2019-04-18T01:49:12.105-00:00", :data {}}]}], :selected-period #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :forms {:bucket-form nil, :period-form nil, :pattern-form nil, :template-form {:bucket-label "time align", :start {:hour 12, :minute 30}, :pattern-id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "new label", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :bucket-color "#11aa11", :data "{}"}, :filter-form nil}}, :alert "Failed data read validation Error: More than one element found in structure: {}"}[:app] Compiling ...
[:app] Build completed. (176 files, 2 compiled, 0 warnings, 0.38s)

time-align-mobile.handlers> (defn save-template-form [{:keys [db]} [_ date-time]]
  (let [template-form (get-in db [:forms :template-form])]
    (try
      (let [new-data            (read-string (:data template-form))
            ;; keys-wanted         (->> template-form
            ;;                          (keys)
            ;;                          (remove #(or (= :bucket-id %)
            ;;                                       (= :bucket-label %)
            ;;                                       (= :bucket-color %)
            ;;                                       (= :pattern-id))))
            ;; new-template        (-> template-form
            ;;                         (merge {:data        new-data
            ;;                                 :last-edited date-time})
            ;;                         (select-keys keys-wanted))
            ;; [old-pattern
            ;;  old-template]      (select-one [:patterns sp/ALL
            ;;                                  (sp/collect-one (sp/submap [:id]))
            ;;                                  :templates sp/ALL
            ;;                                  #(= (:id %) (:id new-template))] db)
            ;; removed-template-db (setval [:patterns sp/ALL
            ;;                              #(= (:id %) (:id old-pattern))
            ;;                              :templates sp/ALL
            ;;                              #(= (:id %) (:id old-template))]
            ;;                             sp/NONE db)
            ;; new-db              (setval [:patterns sp/ALL
            ;;                              #(= (:id %) (:pattern-id template-form))
            ;;                              :templates
            ;;                              sp/NIL->VECTOR
            ;;                              sp/AFTER-ELEM]
            ;;                             new-template removed-template-db)
            ]

        {:new-data new-data
         ;; :keys-wanted keys-wanted
         ;; :new-template new-template
         ;; :old-pattern old-pattern
         ;; :old-template old-template
         ;; :removed-template-db (select-one [:patterns sp/ALL :templates sp/ALL] removed-template-db)
         ;; :new-db (select-one [:patterns sp/ALL :templates sp/ALL] new-db)
         }
        ;; {:db       new-db
        ;;  ;; load template form so that the data string gets re-formatted prettier
        ;;  :dispatch [:load-template-form (:id new-template)]}
        )
      (catch js/Error e
        {:db    db
         :alert (str "Failed data read validation " e)}))))
#'time-align-mobile.handlers/save-template-form
time-align-mobile.handlers> (save-template-form {:db new-app-db} [:no-op (js/Date.)])
WARNING: Use of undeclared Var time-align-mobile.handlers/new-app-db (<stdin> at 1:26)
{:new-data {}}
time-align-mobile.handlers> (defn save-template-form [{:keys [db]} [_ date-time]]
  (let [template-form (get-in db [:forms :template-form])]
    (try
      (let [new-data            (read-string (:data template-form))
            keys-wanted         (->> template-form
                                     (keys)
                                     (remove #(or (= :bucket-id %)
                                                  (= :bucket-label %)
                                                  (= :bucket-color %)
                                                  (= :pattern-id))))
            ;; new-template        (-> template-form
            ;;                         (merge {:data        new-data
            ;;                                 :last-edited date-time})
            ;;                         (select-keys keys-wanted))
            ;; [old-pattern
            ;;  old-template]      (select-one [:patterns sp/ALL
            ;;                                  (sp/collect-one (sp/submap [:id]))
            ;;                                  :templates sp/ALL
            ;;                                  #(= (:id %) (:id new-template))] db)
            ;; removed-template-db (setval [:patterns sp/ALL
            ;;                              #(= (:id %) (:id old-pattern))
            ;;                              :templates sp/ALL
            ;;                              #(= (:id %) (:id old-template))]
            ;;                             sp/NONE db)
            ;; new-db              (setval [:patterns sp/ALL
            ;;                              #(= (:id %) (:pattern-id template-form))
            ;;                              :templates
            ;;                              sp/NIL->VECTOR
            ;;                              sp/AFTER-ELEM]
            ;;                             new-template removed-template-db)
            ]

        {:new-data new-data
         :keys-wanted keys-wanted
         ;; :new-template new-template
         ;; :old-pattern old-pattern
         ;; :old-template old-template
         ;; :removed-template-db (select-one [:patterns sp/ALL :templates sp/ALL] removed-template-db)
         ;; :new-db (select-one [:patterns sp/ALL :templates sp/ALL] new-db)
         }
        ;; {:db       new-db
        ;;  ;; load template form so that the data string gets re-formatted prettier
        ;;  :dispatch [:load-template-form (:id new-template)]}
        )
      (catch js/Error e
        {:db    db
         :alert (str "Failed data read validation " e)}))))
#'time-align-mobile.handlers/save-template-form
time-align-mobile.handlers> (save-template-form {:db new-app-db} [:no-op (js/Date.)])
WARNING: Use of undeclared Var time-align-mobile.handlers/new-app-db (<stdin> at 1:26)
{:new-data {}, :keys-wanted ()}
time-align-mobile.handlers> (defn save-template-form [{:keys [db]} [_ date-time]]
  (let [template-form (get-in db [:forms :template-form])]
    (try
      (let [new-data            (read-string (:data template-form))
            keys-wanted         (->> template-form
                                     (keys)
                                     (remove #(or (= :bucket-id %)
                                                  (= :bucket-label %)
                                                  (= :bucket-color %)
                                                  (= :pattern-id))))
            ;; new-template        (-> template-form
            ;;                         (merge {:data        new-data
            ;;                                 :last-edited date-time})
            ;;                         (select-keys keys-wanted))
            ;; [old-pattern
            ;;  old-template]      (select-one [:patterns sp/ALL
            ;;                                  (sp/collect-one (sp/submap [:id]))
            ;;                                  :templates sp/ALL
            ;;                                  #(= (:id %) (:id new-template))] db)
            ;; removed-template-db (setval [:patterns sp/ALL
            ;;                              #(= (:id %) (:id old-pattern))
            ;;                              :templates sp/ALL
            ;;                              #(= (:id %) (:id old-template))]
            ;;                             sp/NONE db)
            ;; new-db              (setval [:patterns sp/ALL
            ;;                              #(= (:id %) (:pattern-id template-form))
            ;;                              :templates
            ;;                              sp/NIL->VECTOR
            ;;                              sp/AFTER-ELEM]
            ;;                             new-template removed-template-db)
            ]

        {:new-data new-data
         :keys-wanted keys-wanted
         :template-form template-form
         ;; :new-template new-template
         ;; :old-pattern old-pattern
         ;; :old-template old-template
         ;; :removed-template-db (select-one [:patterns sp/ALL :templates sp/ALL] removed-template-db)
         ;; :new-db (select-one [:patterns sp/ALL :templates sp/ALL] new-db)
         }
        ;; {:db       new-db
        ;;  ;; load template form so that the data string gets re-formatted prettier
        ;;  :dispatch [:load-template-form (:id new-template)]}
        )
      (catch js/Error e
        {:db    db
         :alert (str "Failed data read validation " e)}))))
#'time-align-mobile.handlers/save-template-form
time-align-mobile.handlers> (save-template-form {:db new-app-db} [:no-op (js/Date.)])
WARNING: Use of undeclared Var time-align-mobile.handlers/new-app-db (<stdin> at 1:26)
{:new-data {}, :keys-wanted (), :template-form {:bucket-label "time align", :start {:hour 12, :minute 30}, :pattern-id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "new label", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :bucket-color "#11aa11", :data "{}"}}
time-align-mobile.handlers> (defn save-template-form [{:keys [db]} [_ date-time]]
  (let [template-form (get-in db [:forms :template-form])]
    (try
      (let [new-data            (read-string (:data template-form))
            keys-wanted         (->> template-form
                                     (keys)
                                     (remove #(or (= :bucket-id %)
                                                  (= :bucket-label %)
                                                  (= :bucket-color %)
                                                  (= :pattern-id %))))
            ;; new-template        (-> template-form
            ;;                         (merge {:data        new-data
            ;;                                 :last-edited date-time})
            ;;                         (select-keys keys-wanted))
            ;; [old-pattern
            ;;  old-template]      (select-one [:patterns sp/ALL
            ;;                                  (sp/collect-one (sp/submap [:id]))
            ;;                                  :templates sp/ALL
            ;;                                  #(= (:id %) (:id new-template))] db)
            ;; removed-template-db (setval [:patterns sp/ALL
            ;;                              #(= (:id %) (:id old-pattern))
            ;;                              :templates sp/ALL
            ;;                              #(= (:id %) (:id old-template))]
            ;;                             sp/NONE db)
            ;; new-db              (setval [:patterns sp/ALL
            ;;                              #(= (:id %) (:pattern-id template-form))
            ;;                              :templates
            ;;                              sp/NIL->VECTOR
            ;;                              sp/AFTER-ELEM]
            ;;                             new-template removed-template-db)
            ]

        {:new-data new-data
         :keys-wanted keys-wanted
         :template-form template-form
         ;; :new-template new-template
         ;; :old-pattern old-pattern
         ;; :old-template old-template
         ;; :removed-template-db (select-one [:patterns sp/ALL :templates sp/ALL] removed-template-db)
         ;; :new-db (select-one [:patterns sp/ALL :templates sp/ALL] new-db)
         }
        ;; {:db       new-db
        ;;  ;; load template form so that the data string gets re-formatted prettier
        ;;  :dispatch [:load-template-form (:id new-template)]}
        )
      (catch js/Error e
        {:db    db
         :alert (str "Failed data read validation " e)}))))
#'time-align-mobile.handlers/save-template-form
time-align-mobile.handlers> (save-template-form {:db new-app-db} [:no-op (js/Date.)])
WARNING: Use of undeclared Var time-align-mobile.handlers/new-app-db (<stdin> at 1:26)
{:new-data {}, :keys-wanted (:start :created :stop :label :id :last-edited :data), :template-form {:bucket-label "time align", :start {:hour 12, :minute 30}, :pattern-id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "new label", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :bucket-color "#11aa11", :data "{}"}}
time-align-mobile.handlers> (defn save-template-form [{:keys [db]} [_ date-time]]
  (let [template-form (get-in db [:forms :template-form])]
    (try
      (let [new-data            (read-string (:data template-form))
            keys-wanted         (->> template-form
                                     (keys)
                                     (remove #(or (= :bucket-id %)
                                                  (= :bucket-label %)
                                                  (= :bucket-color %)
                                                  (= :pattern-id %))))
            new-template        (-> template-form
                                    (merge {:data        new-data
                                            :last-edited date-time})
                                    (select-keys keys-wanted))
            [old-pattern
             old-template]      (select-one [:patterns sp/ALL
                                             (sp/collect-one (sp/submap [:id]))
                                             :templates sp/ALL
                                             #(= (:id %) (:id new-template))] db)
            removed-template-db (setval [:patterns sp/ALL
                                         #(= (:id %) (:id old-pattern))
                                         :templates sp/ALL
                                         #(= (:id %) (:id old-template))]
                                        sp/NONE db)
            new-db              (setval [:patterns sp/ALL
                                         #(= (:id %) (:pattern-id template-form))
                                         :templates
                                         sp/NIL->VECTOR
                                         sp/AFTER-ELEM]
                                        new-template removed-template-db)
            ]

        {:new-data new-data
         :keys-wanted keys-wanted
         :template-form template-form
         :new-template new-template
         :old-pattern old-pattern
         :old-template old-template
         :removed-template-db (select-one [:patterns sp/ALL :templates sp/ALL] removed-template-db)
         :new-db (select-one [:patterns sp/ALL :templates sp/ALL] new-db)
         }
        ;; {:db       new-db
        ;;  ;; load template form so that the data string gets re-formatted prettier
        ;;  :dispatch [:load-template-form (:id new-template)]}
        )
      (catch js/Error e
        {:db    db
         :alert (str "Failed data read validation " e)}))))
#'time-align-mobile.handlers/save-template-form
time-align-mobile.handlers> (save-template-form {:db new-app-db} [:no-op (js/Date.)])
WARNING: Use of undeclared Var time-align-mobile.handlers/new-app-db (<stdin> at 1:26)
{:new-data {}, :keys-wanted (:start :created :stop :label :id :last-edited :data), :template-form {:bucket-label "time align", :start {:hour 12, :minute 30}, :pattern-id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "new label", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :bucket-color "#11aa11", :data "{}"}, :new-template {:start {:hour 12, :minute 30}, :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "new label", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T14:18:23.386-00:00", :data {}}, :old-pattern {:id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465"}, :old-template {:id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "do something in time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :start {:hour 12, :minute 30}, :stop {:hour 14, :minute 0}}, :removed-template-db nil, :new-db {:start {:hour 12, :minute 30}, :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "new label", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T14:18:23.386-00:00", :data {}}}
time-align-mobile.handlers> (defn save-template-form [{:keys [db]} [_ date-time]]
  (let [template-form (get-in db [:forms :template-form])]
    (try
      (let [new-data            (read-string (:data template-form))
            keys-wanted         (->> template-form
                                     (keys)
                                     (remove #(or (= :bucket-id %)
                                                  (= :bucket-label %)
                                                  (= :bucket-color %)
                                                  (= :pattern-id %))))
            new-template        (-> template-form
                                    (merge {:data        new-data
                                            :last-edited date-time})
                                    (select-keys keys-wanted))
            [old-pattern
             old-template]      (select-one [:patterns sp/ALL
                                             (sp/collect-one (sp/submap [:id]))
                                             :templates sp/ALL
                                             #(= (:id %) (:id new-template))] db)
            removed-template-db (setval [:patterns sp/ALL
                                         #(= (:id %) (:id old-pattern))
                                         :templates sp/ALL
                                         #(= (:id %) (:id old-template))]
                                        sp/NONE db)
            new-db              (setval [:patterns sp/ALL
                                         #(= (:id %) (:pattern-id template-form))
                                         :templates
                                         sp/NIL->VECTOR
                                         sp/AFTER-ELEM]
                                        new-template removed-template-db)
            ]

        {:new-data new-data
         :keys-wanted keys-wanted
         :template-form template-form
         :new-template new-template
         :old-pattern old-pattern
         :old-template old-template
         :removed-template-db (select-one [:patterns sp/ALL ] removed-template-db)
         :new-db (select-one [:patterns sp/ALL :templates sp/ALL] new-db)
         }
        ;; {:db       new-db
        ;;  ;; load template form so that the data string gets re-formatted prettier
        ;;  :dispatch [:load-template-form (:id new-template)]}
        )
      (catch js/Error e
        {:db    db
         :alert (str "Failed data read validation " e)}))))
#'time-align-mobile.handlers/save-template-form
time-align-mobile.handlers> (save-template-form {:db new-app-db} [:no-op (js/Date.)])
WARNING: Use of undeclared Var time-align-mobile.handlers/new-app-db (<stdin> at 1:26)
{:new-data {}, :keys-wanted (:start :created :stop :label :id :last-edited :data), :template-form {:bucket-label "time align", :start {:hour 12, :minute 30}, :pattern-id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "new label", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :bucket-color "#11aa11", :data "{}"}, :new-template {:start {:hour 12, :minute 30}, :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "new label", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T14:19:18.918-00:00", :data {}}, :old-pattern {:id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465"}, :old-template {:id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "do something in time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :start {:hour 12, :minute 30}, :stop {:hour 14, :minute 0}}, :removed-template-db {:id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :label "an example pattern", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :templates []}, :new-db {:start {:hour 12, :minute 30}, :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "new label", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T14:19:18.918-00:00", :data {}}}
time-align-mobile.handlers> (defn save-template-form [{:keys [db]} [_ date-time]]
  (let [template-form (get-in db [:forms :template-form])]
    (try
      (let [new-data            (read-string (:data template-form))
            keys-wanted         (->> template-form
                                     (keys)
                                     (remove #(or (= :bucket-id %)
                                                  (= :bucket-label %)
                                                  (= :bucket-color %)
                                                  (= :pattern-id %))))
            new-template        (-> template-form
                                    (merge {:data        new-data
                                            :last-edited date-time})
                                    (select-keys keys-wanted))
            [old-pattern
             old-template]      (select-one [:patterns sp/ALL
                                             (sp/collect-one (sp/submap [:id]))
                                             :templates sp/ALL
                                             #(= (:id %) (:id new-template))] db)
            removed-template-db (setval [:patterns sp/ALL
                                         #(= (:id %) (:id old-pattern))
                                         :templates sp/ALL
                                         #(= (:id %) (:id old-template))]
                                        sp/NONE db)
            new-db              (setval [:patterns sp/ALL
                                         #(= (:id %) (:pattern-id template-form))
                                         :templates
                                         sp/NIL->VECTOR
                                         sp/AFTER-ELEM]
                                        new-template removed-template-db)]

        {:db       new-db
         ;; load template form so that the data string gets re-formatted prettier
         :dispatch [:load-template-form (:id new-template)]})
      (catch js/Error e
        {:db    db
         :alert (str "Failed data read validation " e)}))))
#'time-align-mobile.handlers/save-template-form
time-align-mobile.handlers> (save-template-form {:db new-app-db} [:no-op (js/Date.)])
WARNING: Use of undeclared Var time-align-mobile.handlers/new-app-db (<stdin> at 1:26)
{:db {:active-filter nil, :time-navigators {:day #inst "2019-04-18T01:12:40.195-00:00", :calendar #inst "2019-04-18T01:12:40.195-00:00", :report #inst "2019-04-18T01:12:40.195-00:00"}, :now #inst "2019-04-18T01:49:12.105-00:00", :config {:auto-log-time-align true}, :filters [{:id #uuid "bbc34081-38d4-4d4f-ab19-a7cef18c1212", :label "sort by bucket label", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort {:path [:bucket-label], :ascending true}, :predicates []} {:id #uuid "aad94081-38d4-4d4f-ab19-a7cef18c1299", :label "sort by label", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:bucket :filter :period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort {:path [:label], :ascending true}, :predicates []} {:id #uuid "cccc4081-38d4-4d4f-ab19-a7cef18c4444", :label "time align bucket filter", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort nil, :predicates [{:path [:bucket-id], :value "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :negate false}]}], :patterns [{:id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :label "an example pattern", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :templates [{:start {:hour 12, :minute 30}, :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "new label", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T14:20:10.898-00:00", :data {}}]}], :navigation {:current-screen :day, :params nil}, :period-in-play-id #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :buckets [{:id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :color "#11aa11", :periods [{:id #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :label "start using", :planned false, :start #inst "2019-04-18T01:12:40.195-00:00", :stop #inst "2019-04-18T01:49:12.105-00:00", :data {}}]}], :selected-period #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :forms {:bucket-form nil, :period-form nil, :pattern-form nil, :template-form {:bucket-label "time align", :start {:hour 12, :minute 30}, :pattern-id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "new label", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :bucket-color "#11aa11", :data "{}"}, :filter-form nil}}, :dispatch [:load-template-form #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647"]}
time-align-mobile.handlers> (select-one [:patterns sp/ALL :templates sp/FIRST :label] (save-template-form {:db new-app-db} [:no-op (js/Date.)]))
WARNING: Use of undeclared Var time-align-mobile.handlers/new-app-db (<stdin> at 1:84)
nil
time-align-mobile.handlers> (= "new label" (select-one [:db :patterns sp/ALL :templates sp/FIRST :label] (save-template-form {:db new-app-db} [:no-op (js/Date.)])))
WARNING: Use of undeclared Var time-align-mobile.handlers/new-app-db (<stdin> at 1:103)
true[:app] Compiling ...
[:app] Build completed. (176 files, 2 compiled, 0 warnings, 0.40s)

time-align-mobile.handlers> (def app-db-template-form-loaded (load-template-form @re-frame.db/app-db [:no-op #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647"]))
#'time-align-mobile.handlers/app-db-template-form-loaded
time-align-mobile.handlers> (get-in app-db-template-form-loaded [:forms :template-form])
{:bucket-label "time align", :start {:hour 12, :minute 30}, :pattern-id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "do something in time align", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :bucket-color "#11aa11", :data "{}"}
time-align-mobile.handlers> (defn update-template-form [db [_ template-form]]
  (let [template-form (if (and (contains? template-form :bucket-id)
                               (contains? template-form :pattern-id))
                        (merge template-form
                               {:bucket-label (:label
                                               (select-one
                                                [:buckets
                                                 sp/ALL
                                                 #(= (:id %) (:bucket-id template-form))]
                                                db))}
                               {:pattern-label (:label
                                                (select-one
                                                 [:patterns
                                                  sp/ALL
                                                  #(= (:id %) (:pattern-id template-form))]
                                                 db))})
                        ;; ^ pulls out the label when selecting new parent
                        ;; because all that comes from the picker is id
                        template-form)]
    (transform [:forms :template-form] #(merge % template-form) db)))
#'time-align-mobile.handlers/update-template-form
time-align-mobile.handlers> (get-in (update-template-form app-db-template-form-loaded [:no-op {:label "update template form tested"}]) [:forms :template-form])
{:bucket-label "time align", :start {:hour 12, :minute 30}, :pattern-id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "update template form tested", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :bucket-color "#11aa11", :data "{}"}[:app] Compiling ...
[:app] Build completed. (176 files, 2 compiled, 0 warnings, 0.42s)
[:app] Compiling ...
[:app] Build completed. (176 files, 2 compiled, 0 warnings, 0.40s)

time-align-mobile.handlers> (def add-new-payload-test {:pattern-id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465" :id #uuid "9f949891-38d4-4d4f-ab19-a7cef18c9999" :now (js/Date. 2019 5 18)})
#'time-align-mobile.handlers/add-new-payload-test
time-align-mobile.handlers> @re-frame.db/app-db
{:active-filter nil, :time-navigators {:day #inst "2019-04-18T01:12:40.195-00:00", :calendar #inst "2019-04-18T01:12:40.195-00:00", :report #inst "2019-04-18T01:12:40.195-00:00"}, :now #inst "2019-04-18T16:31:00.374-00:00", :config {:auto-log-time-align true}, :filters [{:id #uuid "bbc34081-38d4-4d4f-ab19-a7cef18c1212", :label "sort by bucket label", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort {:path [:bucket-label], :ascending true}, :predicates []} {:id #uuid "aad94081-38d4-4d4f-ab19-a7cef18c1299", :label "sort by label", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:bucket :filter :period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort {:path [:label], :ascending true}, :predicates []} {:id #uuid "cccc4081-38d4-4d4f-ab19-a7cef18c4444", :label "time align bucket filter", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort nil, :predicates [{:path [:bucket-id], :value "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :negate false}]}], :patterns [{:id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :label "an example pattern", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :templates [{:id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "do something in time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :start {:hour 12, :minute 30}, :stop {:hour 14, :minute 0}}]}], :navigation {:current-screen :day, :params nil}, :period-in-play-id #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :buckets [{:id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :color "#11aa11", :periods [{:id #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :label "start using", :planned false, :start #inst "2019-04-18T01:12:40.195-00:00", :stop #inst "2019-04-18T16:31:00.374-00:00", :data {}}]}], :selected-period #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :forms {:bucket-form nil, :period-form nil, :pattern-form nil, :template-form nil, :filter-form nil}}
time-align-mobile.handlers> (defn add-new-template [{:keys [db]} [_ {:keys [pattern-id id now]}]]
  {:db       (setval [:patterns sp/ALL
                      #(= (:id %) pattern-id)
                      :templates
                      sp/NIL->VECTOR
                      sp/AFTER-ELEM]
                     {:id          id
                      :created     now
                      :last-edited now
                      :label       ""
                      :data        {}
                      :planned     true
                      :start       {:hour   (.getHours now)
                                    :minute (.getMinutes now)}
                      :stop        {:hour   (.getHours now)
                                    :minute (+ 5 (.getMinutes now))}
                      :duration    nil}
                     db)
   :dispatch [:navigate-to {:current-screen :template
                            :params         {:template-id id}}]})
#'time-align-mobile.handlers/add-new-template
time-align-mobile.handlers> (select [:patterns sp/ALL :templates sp/ALL] @re-frame.db/app-db)
[{:id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "do something in time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :start {:hour 12, :minute 30}, :stop {:hour 14, :minute 0}}]
time-align-mobile.handlers> (count (select [:patterns sp/ALL :templates sp/ALL] @re-frame.db/app-db))
1
time-align-mobile.handlers> (select [:db :patterns sp/ALL :templates sp/ALL] (add-new-template {:db @re-frame.db/app-db} [:no-op add-new-payload-test]))
[{:id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "do something in time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :start {:hour 12, :minute 30}, :stop {:hour 14, :minute 0}} {:planned true, :start {:hour 0, :minute 0}, :created #inst "2019-06-18T04:00:00.000-00:00", :duration nil, :stop {:hour 0, :minute 5}, :label "", :id #uuid "9f949891-38d4-4d4f-ab19-a7cef18c9999", :last-edited #inst "2019-06-18T04:00:00.000-00:00", :data {}}]
time-align-mobile.handlers> (count (select [:db :patterns sp/ALL :templates sp/ALL] (add-new-template {:db @re-frame.db/app-db} [:no-op add-new-payload-test])))
2[:app] Compiling ...
[:app] Build completed. (176 files, 2 compiled, 0 warnings, 0.41s)
[:app] Compiling ...
[:app] Build failure:
------ ERROR -------------------------------------------------------------------
 File: /home/justin/projects/time-align-mobile/src/main/time_align_mobile/subs.cljs:127:28
--------------------------------------------------------------------------------
 124 |        (map (fn [[pattern template]]
 125 |               (merge template {:pattern-id (:id pattern)})))
 126 |        (map (fn [template]
 127 |               (let [bucket (select-one [:buckets
----------------------------------^---------------------------------------------
Error in phase :compilation
Wrong number of args (1) passed to: com.rpl.specter/select-one
--------------------------------------------------------------------------------
 128 |                                         sp/ALL
 129 |                                         #(= (:id %) (:bucket-id template))])]
 130 |                 (merge template
 131 |                        {:bucket-label (:label bucket)
--------------------------------------------------------------------------------


time-align-mobile.handlers> (ns time-align-mobile.subs)
no source by id: [:shadow.build.classpath/resource "time_align_mobile/subs.cljs"]
{:id [:shadow.build.classpath/resource "time_align_mobile/subs.cljs"]}
ExceptionInfo: no source by id: [:shadow.build.classpath/resource "time_align_mobile/subs.cljs"]
	shadow.build.data/get-source-by-id (data.clj:167)
	shadow.build.data/get-source-by-id (data.clj:164)
	shadow.build.compiler/remove-dead-js-deps/remove-fn--11861/fn--11862 (compiler.clj:1011)
	clojure.core/complement/fn--5654 (core.clj:1441)
	clojure.core/filter/fn--5878 (core.clj:2817)
	clojure.lang.LazySeq.sval (LazySeq.java:42)
	clojure.lang.LazySeq.seq (LazySeq.java:51)
	clojure.lang.ChunkedCons.chunkedNext (ChunkedCons.java:59)
	clojure.core/chunk-next (core.clj:708)
	clojure.core.protocols/fn--8139 (protocols.clj:137)
	clojure.core.protocols/fn--8139 (protocols.clj:124)
	clojure.core.protocols/fn--8099/G--8094--8108 (protocols.clj:19)
	clojure.core.protocols/seq-reduce (protocols.clj:31)
	clojure.core.protocols/fn--8131 (protocols.clj:75)
	clojure.core.protocols/fn--8131 (protocols.clj:75)
	clojure.core.protocols/fn--8073/G--8068--8086 (protocols.clj:13)
	clojure.core/reduce (core.clj:6828)
	clojure.core/into (core.clj:6895)
	clojure.core/into (core.clj:6887)
	shadow.build.compiler/remove-dead-js-deps/remove-fn--11861 (compiler.clj:1013)
	clojure.core/update (core.clj:6196)
	clojure.core/update (core.clj:6188)
	shadow.build.compiler/remove-dead-js-deps/fn--11866/fn--11867 (compiler.clj:1019)
	clojure.core/map/fn--5851 (core.clj:2753)
	clojure.lang.LazySeq.sval (LazySeq.java:42)
	clojure.lang.LazySeq.seq (LazySeq.java:51)
	clojure.lang.RT.seq (RT.java:531)
	clojure.core/seq--5387 (core.clj:137)
	clojure.core.protocols/seq-reduce (protocols.clj:24)
	clojure.core.protocols/fn--8131 (protocols.clj:75)
	clojure.core.protocols/fn--8131 (protocols.clj:75)
	clojure.core.protocols/fn--8073/G--8068--8086 (protocols.clj:13)
	clojure.core/reduce (core.clj:6828)
	clojure.core/into (core.clj:6895)
	clojure.core/into (core.clj:6887)
	shadow.build.compiler/remove-dead-js-deps/fn--11866 (compiler.clj:1020)
	clojure.core/update (core.clj:6196)
	clojure.core/update (core.clj:6188)
	shadow.build.compiler/remove-dead-js-deps (compiler.clj:1017)
	shadow.build.compiler/remove-dead-js-deps (compiler.clj:1006)
	shadow.build.compiler/compile-all (compiler.clj:1260)
	shadow.build.compiler/compile-all (compiler.clj:1116)
	shadow.build.api/compile-sources (api.clj:250)
	shadow.build.api/compile-sources (api.clj:242)
	shadow.build.api/compile-sources (api.clj:254)
	shadow.build.api/compile-sources (api.clj:242)
	shadow.cljs.repl/repl-ns (repl.clj:312)
	shadow.cljs.repl/repl-ns (repl.clj:292)
	shadow.cljs.repl/process-read-result (repl.clj:401)
	shadow.cljs.repl/process-read-result (repl.clj:381)
	shadow.cljs.devtools.server.worker.impl/fn--13210 (impl.clj:784)
	shadow.cljs.devtools.server.worker.impl/fn--13210 (impl.clj:745)
	clojure.lang.MultiFn.invoke (MultiFn.java:234)
	shadow.cljs.devtools.server.util/server-thread/fn--12888/fn--12889/fn--12897 (util.clj:292)
	shadow.cljs.devtools.server.util/server-thread/fn--12888/fn--12889 (util.clj:291)
	shadow.cljs.devtools.server.util/server-thread/fn--12888 (util.clj:264)
	java.lang.Thread.run (Thread.java:748)
time-align-mobile.handlers> (+ 1 1)
2[:app] Compiling ...
[:app] Build completed. (176 files, 2 compiled, 0 warnings, 0.18s)

time-align-mobile.handlers> (ns time-align-mobile.subs) 
time-align-mobile.subs
time-align-mobile.subs> @re-frame.db/app-db
{:active-filter nil, :time-navigators {:day #inst "2019-04-18T01:12:40.195-00:00", :calendar #inst "2019-04-18T01:12:40.195-00:00", :report #inst "2019-04-18T01:12:40.195-00:00"}, :now #inst "2019-04-18T22:38:20.395-00:00", :config {:auto-log-time-align true}, :filters [{:id #uuid "bbc34081-38d4-4d4f-ab19-a7cef18c1212", :label "sort by bucket label", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort {:path [:bucket-label], :ascending true}, :predicates []} {:id #uuid "aad94081-38d4-4d4f-ab19-a7cef18c1299", :label "sort by label", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:bucket :filter :period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort {:path [:label], :ascending true}, :predicates []} {:id #uuid "cccc4081-38d4-4d4f-ab19-a7cef18c4444", :label "time align bucket filter", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort nil, :predicates [{:path [:bucket-id], :value "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :negate false}]}], :patterns [{:id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :label "an example pattern", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :templates [{:id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "do something in time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :start {:hour 12, :minute 30}, :stop {:hour 14, :minute 0}}]}], :navigation {:current-screen :day, :params nil}, :period-in-play-id #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :buckets [{:id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :color "#11aa11", :periods [{:id #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :label "start using", :planned false, :start #inst "2019-04-18T01:12:40.195-00:00", :stop #inst "2019-04-18T22:38:20.395-00:00", :data {}}]}], :selected-period #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :forms {:bucket-form nil, :period-form nil, :pattern-form nil, :template-form nil, :filter-form nil}}
time-align-mobile.subs> (def app-db @re-frame.db/app-db)
#'time-align-mobile.subs/app-db
time-align-mobile.subs> (get-templates app-db :no-op)
WARNING: Use of undeclared Var time-align-mobile.subs/get-templates (<stdin> at 1:2)
({:bucket-label "time align", :start {:hour 12, :minute 30}, :pattern-id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "do something in time align", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :bucket-color "#11aa11", :data {}})[:app] Compiling ...
[:app] Build completed. (176 files, 2 compiled, 0 warnings, 0.20s)

time-align-mobile.subs> (defn get-template-form [db _]
  (let [template-form    (get-in db [:forms :template-form])
        template-form-id (:id template-form)]
    (if (and (some? template-form-id)
             (uuid? template-form-id))
      template-form
      {:id           "****"
       :bucket-color "#2222aa"
       :bucket-label "****"
       :bucket-id    "****"
       :pattern-id   "****"
       :created      (js/Date.)
       :last-edited  (js/Date.)
       :label        "****"
       :start        nil
       :stop         nil
       :data         {:please "wait"}})))
#'time-align-mobile.subs/get-template-form
time-align-mobile.subs> (get-template-form app-db :no-op)
WARNING: Use of undeclared Var time-align-mobile.subs/app-db (<stdin> at 1:20)
{:bucket-label "****", :start nil, :pattern-id "****", :created #inst "2019-04-19T20:59:25.022-00:00", :stop nil, :label "****", :id "****", :last-edited #inst "2019-04-19T20:59:25.022-00:00", :bucket-id "****", :bucket-color "#2222aa", :data {:please "wait"}}
time-align-mobile.subs> (js/Date.)
#inst "2019-04-19T21:00:10.553-00:00"
time-align-mobile.subs> (def app-db-template-form-loaded (load-template-form @re-frame.db/app-db [:no-op #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647"]))
WARNING: Use of undeclared Var time-align-mobile.subs/load-template-form (<stdin> at 1:35)

eval code
eval@[native code]
http://192.168.1.71:19001/./app/index.bundle?platform=android&dev=true&minify=false&hot=false&assetPlugin=%2Fhome%2Fjustin%2Fprojects%2Ftime-align-mobile%2Fnode_modules%2Fexpo%2Ftools%2FhashAssetFiles.js:81360:20
shadow$cljs$devtools$client$env$repl_call@http://192.168.1.71:19001/./app/index.bundle?platform=android&dev=true&minify=false&hot=false&assetPlugin=%2Fhome%2Fjustin%2Fprojects%2Ftime-align-mobile%2Fnode_modules%2Fexpo%2Ftools%2FhashAssetFiles.js:80493:117
shadow$cljs$devtools$client$react_native$repl_invoke@http://192.168.1.71:19001/./app/index.bundle?platform=android&dev=true&minify=false&hot=false&assetPlugin=%2Fhome%2Fjustin%2Fprojects%2Ftime-align-mobile%2Fnode_modules%2Fexpo%2Ftools%2FhashAssetFiles.js:81358:59
shadow$cljs$devtools$client$react_native$handle_message@http://192.168.1.71:19001/./app/index.bundle?platform=android&dev=true&minify=false&hot=false&assetPlugin=%2Fhome%2Fjustin%2Fprojects%2Ftime-align-mobile%2Fnode_modules%2Fexpo%2Ftools%2FhashAssetFiles.js:81431:68
shadow$cljs$devtools$client$env$process_ws_msg@http://192.168.1.71:19001/./app/index.bundle?platform=android&dev=true&minify=false&hot=false&assetPlugin=%2Fhome%2Fjustin%2Fprojects%2Ftime-align-mobile%2Fnode_modules%2Fexpo%2Ftools%2FhashAssetFiles.js:80640:113
http://192.168.1.71:19001/./app/index.bundle?platform=android&dev=true&minify=false&hot=false&assetPlugin=%2Fhome%2Fjustin%2Fprojects%2Ftime-align-mobile%2Fnode_modules%2Fexpo%2Ftools%2FhashAssetFiles.js:81498:62
dispatchEvent@http://192.168.1.71:19001/./app/index.bundle?platform=android&dev=true&minify=false&hot=false&assetPlugin=%2Fhome%2Fjustin%2Fprojects%2Ftime-align-mobile%2Fnode_modules%2Fexpo%2Ftools%2FhashAssetFiles.js:104115:31
http://192.168.1.71:19001/./app/index.bundle?platform=android&dev=true&minify=false&hot=false&assetPlugin=%2Fhome%2Fjustin%2Fprojects%2Ftime-align-mobile%2Fnode_modules%2Fexpo%2Ftools%2FhashAssetFiles.js:105274:31
emit@http://192.168.1.71:19001/./app/index.bundle?platform=android&dev=true&minify=false&hot=false&assetPlugin=%2Fhome%2Fjustin%2Fprojects%2Ftime-align-mobile%2Fnode_modules%2Fexpo%2Ftools%2FhashAssetFiles.js:83353:42
__callFunction@http://192.168.1.71:19001/./app/index.bundle?platform=android&dev=true&minify=false&hot=false&assetPlugin=%2Fhome%2Fjustin%2Fprojects%2Ftime-align-mobile%2Fnode_modules%2Fexpo%2Ftools%2FhashAssetFiles.js:82648:49
http://192.168.1.71:19001/./app/index.bundle?platform=android&dev=true&minify=false&hot=false&assetPlugin=%2Fhome%2Fjustin%2Fprojects%2Ftime-align-mobile%2Fnode_modules%2Fexpo%2Ftools%2FhashAssetFiles.js:82421:31
__guard@http://192.168.1.71:19001/./app/index.bundle?platform=android&dev=true&minify=false&hot=false&assetPlugin=%2Fhome%2Fjustin%2Fprojects%2Ftime-align-mobile%2Fnode_modules%2Fexpo%2Ftools%2FhashAssetFiles.js:82602:15
callFunctionReturnFlushedQueue@http://192.168.1.71:19001/./app/index.bundle?platform=android&dev=true&minify=false&hot=false&assetPlugin=%2Fhome%2Fjustin%2Fprojects%2Ftime-align-mobile%2Fnode_modules%2Fexpo%2Ftools%2FhashAssetFiles.js:82420:21
callFunctionReturnFlushedQueue@[native code]
time-align-mobile.subs> (def app-db-template-form-loaded (time-align-mobile.handlers/load-template-form @re-frame.db/app-db [:no-op #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647"]))
#'time-align-mobile.subs/app-db-template-form-loaded
time-align-mobile.subs> (get-template-form app-db-template-form-loaded :no-op)
{:bucket-label "time align", :start {:hour 12, :minute 30}, :pattern-id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "do something in time align", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :bucket-color "#11aa11", :data "{}"}
time-align-mobile.subs> (defn get-template-form-changes [db _]
  (let [template-form (get-in db [:forms :template-form])]
    (if (some? (:id template-form))
      (let [[pattern template] (select-one
                                [:patterns sp/ALL
                                 (sp/collect-one
                                  (sp/submap [:id :label]))
                                 :templates sp/ALL
                                 #(= (:id %) (:id template-form))]
                                db)
            ;; data needs to be coerced to compare to form
            new-data           (helpers/print-data (:data template))
            bucket             (select-one [:buckets sp/ALL
                                            #(= (:id %) (:bucket-id template))]
                                           db)
            altered-template   (merge template {:data          new-data
                                                :pattern-label (:label pattern)
                                                :bucket-color  (:color bucket)
                                                :bucket-label  (:label bucket)})
            different-keys     (->> (clojure.data/diff template-form altered-template)
                                    (first))]
        (if (nil? different-keys)
          {} ;; empty map if no changes
          different-keys))
      ;; return an empty map if there is no loaded template in the form
      {})))
#'time-align-mobile.subs/get-template-form-changes
time-align-mobile.subs> (get-template-form-changes app-db-template-form-loaded :no-op)
{:pattern-id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465"}
time-align-mobile.subs> (defn get-template-form-changes [db _]
  (let [template-form (get-in db [:forms :template-form])]
    (if (some? (:id template-form))
      (let [[pattern template] (select-one
                                [:patterns sp/ALL
                                 (sp/collect-one
                                  (sp/submap [:id :label]))
                                 :templates sp/ALL
                                 #(= (:id %) (:id template-form))]
                                db)
            ;; data needs to be coerced to compare to form
            new-data           (helpers/print-data (:data template))
            bucket             (select-one
                                [:buckets sp/ALL
                                 #(= (:id %) (:bucket-id template-form))]
                                           db)
            altered-template   (merge template {:data          new-data
                                                :pattern-id    (:id pattern)
                                                :pattern-label (:label pattern)
                                                :bucket-color  (:color bucket)
                                                :bucket-label  (:label bucket)})
            different-keys     (->> (clojure.data/diff
                                     template-form altered-template)
                                    (first))]
        (if (nil? different-keys)
          {} ;; empty map if no changes
          different-keys))
      ;; return an empty map if there is no loaded template in the form
      {})))
#'time-align-mobile.subs/get-template-form-changes
time-align-mobile.subs> (get-template-form-changes app-db-template-form-loaded :no-op)
{}
time-align-mobile.subs> (get-template-form-changes (assoc-in app-db-template-form-loaded [:forms :template-form :label "test form chagne sub"]) :no-op)
;; output cleared

time-align-mobile.subs> (get-template-form-changes (assoc-in app-db-template-form-loaded [:forms :template-form :label ] "test form chagne sub") :no-op)
{:label "test form chagne sub"}[:app] Compiling ...
[:app] Build completed. (176 files, 2 compiled, 0 warnings, 0.21s)

time-align-mobile.subs> 