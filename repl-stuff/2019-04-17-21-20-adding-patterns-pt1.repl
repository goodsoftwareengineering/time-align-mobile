;; Connected to nREPL server - nrepl://localhost:8202
;; CIDER 0.22.0snapshot (package: 20190329.1924), nREPL 0.6.0
;; Clojure 1.10.0, Java 1.8.0_191
;;     Docs: (doc function-name)
;;           (find-doc part-of-name)
;;   Source: (source function-name)
;;  Javadoc: (javadoc java-object-or-class)
;;     Exit: <C-c C-q>
;;  Results: Stored in vars *1, *2, *3, an exception in *e;
;; ======================================================================
;; If you’re new to CIDER it is highly recommended to go through its
;; manual first. Type <M-x cider-view-manual> to view it.
;; In case you’re seeing any warnings you should consult the manual’s
;; "Troubleshooting" section.
;;
;; Here are few tips to get you started:
;;
;; * Press <C-h m> to see a list of the keybindings available (this
;;   will work in every Emacs buffer)
;; * Press <, ,> to quickly invoke some REPL command
;; * Press <, s s> to switch between the REPL and a Clojure file
;; * Press <M-x cider-find-var> to jump to the source of something (e.g. a var, a
;;   Java method)
;; * Press <, h h> to view the documentation for something (e.g.
;;   a var, a Java method)
;; * Enable ‘eldoc-mode’ to display function & method signatures in the minibuffer.
;; * Print CIDER’s refcard and keep it close to your keyboard.
;;
;; CIDER is super customizable - try <M-x customize-group cider> to
;; get a feel for this. If you’re thirsty for knowledge you should try
;; <M-x cider-drink-a-sip>.
;;
;; If you think you’ve encountered a bug (or have some suggestions for
;; improvements) use <M-x cider-report-bug> to report it.
;;
;; Above all else - don’t panic! In case of an emergency - procure
;; some (hard) cider and enjoy it responsibly!
;;
;; You can remove this message with the <M-x cider-repl-clear-help-banner> command.
;; You can disable it from appearing on start by setting
;; ‘cider-repl-display-help-banner’ to nil.
;; ======================================================================
WARNING: No Clojure project was detected. The
refactor-nrepl middleware was not enabled. (You can mute this
warning by customizing `cljr-suppress-no-project-warning'.)To quit, type: :cljs/quit
[:selected :app]
shadow.user> 
cljs.user> (+ 1 1)
2
cljs.user> (:patterns @re-frame.db/app-db)
[{:id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :label "an example pattern", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :templates [{:id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "do something in time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :start {:hour 12, :minute 30}, :stop {:hour 14, :minute 0}}]}][:app] Compiling ...
[:app] Build completed. (176 files, 2 compiled, 0 warnings, 0.47s)

cljs.user> (+ 1 1)
2
cljs.user> (ns time-align-mobile.handlers)
time-align-mobile.handlers
time-align-mobile.handlers> (defn delete-template [{:keys [db]} [_ id]]
  {:db (->> db
            (setval [:patterns sp/ALL :templates sp/ALL #(= id (:id %))] sp/NONE)
            (setval [:forms :template-form] nil)
            (setval [:forms :pattern-form] nil))
   ;; TODO pop stack when possible
   :dispatch [:navigate-to {:current-screen :templates}]})
#'time-align-mobile.handlers/delete-template
time-align-mobile.handlers> (delete-template {:db @re-frame.db/app-db} [:no-op #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647"])
{:db {:active-filter nil, :time-navigators {:day #inst "2019-04-18T01:12:40.195-00:00", :calendar #inst "2019-04-18T01:12:40.195-00:00", :report #inst "2019-04-18T01:12:40.195-00:00"}, :now #inst "2019-04-18T01:17:57.743-00:00", :config {:auto-log-time-align true}, :filters [{:id #uuid "bbc34081-38d4-4d4f-ab19-a7cef18c1212", :label "sort by bucket label", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort {:path [:bucket-label], :ascending true}, :predicates []} {:id #uuid "aad94081-38d4-4d4f-ab19-a7cef18c1299", :label "sort by label", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:bucket :filter :period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort {:path [:label], :ascending true}, :predicates []} {:id #uuid "cccc4081-38d4-4d4f-ab19-a7cef18c4444", :label "time align bucket filter", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort nil, :predicates [{:path [:bucket-id], :value "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :negate false}]}], :patterns [{:id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :label "an example pattern", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :templates []}], :navigation {:current-screen :day, :params nil}, :period-in-play-id #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :buckets [{:id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :color "#11aa11", :periods [{:id #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :label "start using", :planned false, :start #inst "2019-04-18T01:12:40.195-00:00", :stop #inst "2019-04-18T01:17:57.743-00:00", :data {}}]}], :selected-period #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :forms {:bucket-form nil, :period-form nil, :pattern-form nil, :template-form nil, :filter-form nil}}, :dispatch [:navigate-to {:current-screen :templates}]}
time-align-mobile.handlers> (:patterns (delete-template {:db @re-frame.db/app-db} [:no-op #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647"]))
nil
time-align-mobile.handlers> (get-in (delete-template {:db @re-frame.db/app-db} [:no-op #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647"]) [:db :patterns])
[{:id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :label "an example pattern", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :templates []}]
time-align-mobile.handlers> (defn load-template-form [db [_ template-id]]
  (let [[pattern template] (select-one
                            [:patterns sp/ALL
                             (sp/collect-one (sp/submap [:id]))
                             :templates sp/ALL #(= (:id %) template-id)] db)
        bucket             (select-one [:buckets sp/ALL
                                        #(= (:bucket-id template) (:id %))] db)
        external-data      {:pattern-id   (:id pattern)
                            :bucket-color (:color bucket)
                            :bucket-label (:label bucket)}
        template-form      (merge template
                                  external-data
                                  {:data (helpers/print-data (:data template))})]

    (assoc-in db [:forms :template-form] template-form)))
#'time-align-mobile.handlers/load-template-form
time-align-mobile.handlers> (get-in @re-frame.db/app-db [:forms :template-form])
nil
time-align-mobile.handlers> (get-in @re-frame.db/app-db [:forms ])
{:bucket-form nil, :period-form nil, :pattern-form nil, :template-form nil, :filter-form nil}
time-align-mobile.handlers> (get-in (load-template-form @re-frame.db/app-db [:no-op #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647"]) [:forms :template-form])
{:bucket-label "time align", :start {:hour 12, :minute 30}, :pattern-id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "do something in time align", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :bucket-color "#11aa11", :data "{}"}
time-align-mobile.handlers> (keys (get-in (load-template-form @re-frame.db/app-db [:no-op #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647"]) [:forms :template-form]))
(:bucket-label :start :pattern-id :created :stop :label :id :last-edited :bucket-id :bucket-color :data)
time-align-mobile.handlers> (defn save-template-form [{:keys [db]} [_ date-time]]
  (let [template-form (get-in db [:forms :template-form])]
    (try
      (let [new-data            (read-string (:data template-form))
            keys-wanted         (->> template-form
                                     (keys)
                                     (remove #(or (= :bucket-id %)
                                                  (= :bucket-label %)
                                                  (= :bucket-color %)
                                                  (= :pattern-id))))
            new-template        (-> template-form
                                    (merge {:data        new-data
                                            :last-edited date-time})
                                    (select-keys keys-wanted))
            [old-pattern
             old-template]      (select-one [:patterns sp/ALL
                                             (sp/collect-one (sp/submap [:id]))
                                             :templates sp/ALL
                                             #(= (:id %) (:id new-template))] db)
            removed-template-db (setval [:patterns sp/ALL
                                         #(= (:id %) (:id old-pattern))
                                         :templates sp/ALL
                                         #(= (:id %) (:id old-template))]
                                        sp/NONE db)
            new-db              (setval [:patterns sp/ALL
                                         #(= (:id %) (:pattern-id template-form))
                                         :templates
                                         sp/NIL->VECTOR
                                         sp/AFTER-ELEM]
                                        new-template removed-template-db)]

        {:db       new-db
         ;; load template form so that the data string gets re-formatted prettier
         :dispatch [:load-template-form (:id new-template)]})
      (catch js/Error e
        {:db    db
         :alert (str "Failed data read validation " e)}))))
#'time-align-mobile.handlers/save-template-form
time-align-mobile.handlers> (setval [:forms :template-form :label] "new label" (load-template-form @re-frame.db/app-db [:no-op #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647"]))
{:active-filter nil, :time-navigators {:day #inst "2019-04-18T01:12:40.195-00:00", :calendar #inst "2019-04-18T01:12:40.195-00:00", :report #inst "2019-04-18T01:12:40.195-00:00"}, :now #inst "2019-04-18T01:48:28.902-00:00", :config {:auto-log-time-align true}, :filters [{:id #uuid "bbc34081-38d4-4d4f-ab19-a7cef18c1212", :label "sort by bucket label", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort {:path [:bucket-label], :ascending true}, :predicates []} {:id #uuid "aad94081-38d4-4d4f-ab19-a7cef18c1299", :label "sort by label", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:bucket :filter :period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort {:path [:label], :ascending true}, :predicates []} {:id #uuid "cccc4081-38d4-4d4f-ab19-a7cef18c4444", :label "time align bucket filter", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort nil, :predicates [{:path [:bucket-id], :value "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :negate false}]}], :patterns [{:id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :label "an example pattern", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :templates [{:id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "do something in time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :start {:hour 12, :minute 30}, :stop {:hour 14, :minute 0}}]}], :navigation {:current-screen :day, :params nil}, :period-in-play-id #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :buckets [{:id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :color "#11aa11", :periods [{:id #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :label "start using", :planned false, :start #inst "2019-04-18T01:12:40.195-00:00", :stop #inst "2019-04-18T01:48:28.902-00:00", :data {}}]}], :selected-period #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :forms {:bucket-form nil, :period-form nil, :pattern-form nil, :template-form {:bucket-label "time align", :start {:hour 12, :minute 30}, :pattern-id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "new label", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :bucket-color "#11aa11", :data "{}"}, :filter-form nil}}
time-align-mobile.handlers> (def new-app-db (setval [:forms :template-form :label] "new label" (load-template-form @re-frame.db/app-db [:no-op #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647"])))
#'time-align-mobile.handlers/new-app-db
time-align-mobile.handlers> (get-in @re-frame.db/app-db [:forms :template-form :label])
nil
time-align-mobile.handlers> (get-in new-app-db [:forms :template-form :label])
"new label"
time-align-mobile.handlers> (select-one [:patterns sp/ALL :templates sp/FIRST :label] new-app-db)
"do something in time align"
time-align-mobile.handlers> (save-template-form {:db new-app-db} [:no-op (js/Date.)])
{:db {:active-filter nil, :time-navigators {:day #inst "2019-04-18T01:12:40.195-00:00", :calendar #inst "2019-04-18T01:12:40.195-00:00", :report #inst "2019-04-18T01:12:40.195-00:00"}, :now #inst "2019-04-18T01:49:12.105-00:00", :config {:auto-log-time-align true}, :filters [{:id #uuid "bbc34081-38d4-4d4f-ab19-a7cef18c1212", :label "sort by bucket label", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort {:path [:bucket-label], :ascending true}, :predicates []} {:id #uuid "aad94081-38d4-4d4f-ab19-a7cef18c1299", :label "sort by label", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:bucket :filter :period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort {:path [:label], :ascending true}, :predicates []} {:id #uuid "cccc4081-38d4-4d4f-ab19-a7cef18c4444", :label "time align bucket filter", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort nil, :predicates [{:path [:bucket-id], :value "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :negate false}]}], :patterns [{:id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :label "an example pattern", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :templates [{:id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "do something in time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :start {:hour 12, :minute 30}, :stop {:hour 14, :minute 0}} {}]}], :navigation {:current-screen :day, :params nil}, :period-in-play-id #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :buckets [{:id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :color "#11aa11", :periods [{:id #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :label "start using", :planned false, :start #inst "2019-04-18T01:12:40.195-00:00", :stop #inst "2019-04-18T01:49:12.105-00:00", :data {}}]}], :selected-period #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :forms {:bucket-form nil, :period-form nil, :pattern-form nil, :template-form {:bucket-label "time align", :start {:hour 12, :minute 30}, :pattern-id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "new label", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :bucket-color "#11aa11", :data "{}"}, :filter-form nil}}, :dispatch [:load-template-form nil]}
time-align-mobile.handlers> (def result-db (save-template-form {:db new-app-db} [:no-op (js/Date.)]))
#'time-align-mobile.handlers/result-db
time-align-mobile.handlers> (select-one [:patterns sp/ALL :templates sp/FIRST :label] new-app-db)
"do something in time align"
time-align-mobile.handlers> (select-one [:patterns sp/ALL :templates sp/FIRST :label] result-db)
nil
time-align-mobile.handlers> (save-template-form {:db new-app-db} [:no-op (js/Date.)])
{:db {:active-filter nil, :time-navigators {:day #inst "2019-04-18T01:12:40.195-00:00", :calendar #inst "2019-04-18T01:12:40.195-00:00", :report #inst "2019-04-18T01:12:40.195-00:00"}, :now #inst "2019-04-18T01:49:12.105-00:00", :config {:auto-log-time-align true}, :filters [{:id #uuid "bbc34081-38d4-4d4f-ab19-a7cef18c1212", :label "sort by bucket label", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort {:path [:bucket-label], :ascending true}, :predicates []} {:id #uuid "aad94081-38d4-4d4f-ab19-a7cef18c1299", :label "sort by label", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:bucket :filter :period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort {:path [:label], :ascending true}, :predicates []} {:id #uuid "cccc4081-38d4-4d4f-ab19-a7cef18c4444", :label "time align bucket filter", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort nil, :predicates [{:path [:bucket-id], :value "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :negate false}]}], :patterns [{:id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :label "an example pattern", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :templates [{:id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "do something in time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :start {:hour 12, :minute 30}, :stop {:hour 14, :minute 0}} {}]}], :navigation {:current-screen :day, :params nil}, :period-in-play-id #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :buckets [{:id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :color "#11aa11", :periods [{:id #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :label "start using", :planned false, :start #inst "2019-04-18T01:12:40.195-00:00", :stop #inst "2019-04-18T01:49:12.105-00:00", :data {}}]}], :selected-period #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :forms {:bucket-form nil, :period-form nil, :pattern-form nil, :template-form {:bucket-label "time align", :start {:hour 12, :minute 30}, :pattern-id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "new label", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :bucket-color "#11aa11", :data "{}"}, :filter-form nil}}, :dispatch [:load-template-form nil]}
time-align-mobile.handlers> (select-one [:db :patterns sp/ALL :templates sp/FIRST :label] result-db)
"do something in time align"
time-align-mobile.handlers> (get-in new-app-db [:forms :template-form])
{:bucket-label "time align", :start {:hour 12, :minute 30}, :pattern-id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "new label", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :bucket-color "#11aa11", :data "{}"}
time-align-mobile.handlers> (defn save-template-form [{:keys [db]} [_ date-time]]
  (let [template-form (get-in db [:forms :template-form])]
    (try
      (let [new-data            (read-string (:data template-form))
            keys-wanted         (->> template-form
                                     (keys)
                                     (remove #(or (= :bucket-id %)
                                                  (= :bucket-label %)
                                                  (= :bucket-color %)
                                                  (= :pattern-id))))
            new-template        (-> template-form
                                    (merge {:data        new-data
                                            :last-edited date-time})
                                    (select-keys keys-wanted))
            [old-pattern
             old-template]      (select-one [:patterns sp/ALL
                                             (sp/collect-one (sp/submap [:id]))
                                             :templates sp/ALL
                                             #(= (:id %) (:id new-template))] db)
            removed-template-db (setval [:patterns sp/ALL
                                         #(= (:id %) (:id old-pattern))
                                         :templates sp/ALL
                                         #(= (:id %) (:id old-template))]
                                        sp/NONE db)
            new-db              (setval [:patterns sp/ALL
                                         #(= (:id %) (:pattern-id template-form))
                                         :templates
                                         sp/NIL->VECTOR
                                         sp/AFTER-ELEM]
                                        new-template removed-template-db)]

        {:new-data new-data
         :keys-wanted keys-wanted
         :new-template new-template
         :old-pattern old-pattern
         :old-template old-template
         :removed-template-db (select-one [:patterns sp/ALL :templates sp/ALL] removed-template-db)
         :new-db (select-one [:patterns sp/ALL :templates sp/ALL] new-db)}
        ;; {:db       new-db
        ;;  ;; load template form so that the data string gets re-formatted prettier
        ;;  :dispatch [:load-template-form (:id new-template)]}
        )
      (catch js/Error e
        {:db    db
         :alert (str "Failed data read validation " e)}))))
#'time-align-mobile.handlers/save-template-form
time-align-mobile.handlers> (save-template-form {:db new-app-db} [:no-op (js/Date.)])
{:db {:active-filter nil, :time-navigators {:day #inst "2019-04-18T01:12:40.195-00:00", :calendar #inst "2019-04-18T01:12:40.195-00:00", :report #inst "2019-04-18T01:12:40.195-00:00"}, :now #inst "2019-04-18T01:49:12.105-00:00", :config {:auto-log-time-align true}, :filters [{:id #uuid "bbc34081-38d4-4d4f-ab19-a7cef18c1212", :label "sort by bucket label", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort {:path [:bucket-label], :ascending true}, :predicates []} {:id #uuid "aad94081-38d4-4d4f-ab19-a7cef18c1299", :label "sort by label", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:bucket :filter :period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort {:path [:label], :ascending true}, :predicates []} {:id #uuid "cccc4081-38d4-4d4f-ab19-a7cef18c4444", :label "time align bucket filter", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort nil, :predicates [{:path [:bucket-id], :value "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :negate false}]}], :patterns [{:id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :label "an example pattern", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :templates [{:id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "do something in time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :start {:hour 12, :minute 30}, :stop {:hour 14, :minute 0}}]}], :navigation {:current-screen :day, :params nil}, :period-in-play-id #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :buckets [{:id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :color "#11aa11", :periods [{:id #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :label "start using", :planned false, :start #inst "2019-04-18T01:12:40.195-00:00", :stop #inst "2019-04-18T01:49:12.105-00:00", :data {}}]}], :selected-period #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :forms {:bucket-form nil, :period-form nil, :pattern-form nil, :template-form {:bucket-label "time align", :start {:hour 12, :minute 30}, :pattern-id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "new label", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :bucket-color "#11aa11", :data "{}"}, :filter-form nil}}, :alert "Failed data read validation Error: More than one element found in structure: {}"}
time-align-mobile.handlers> (+ 1 1)
2
time-align-mobile.handlers> (js/Date.)
#inst "2019-04-18T14:07:21.407-00:00"
time-align-mobile.handlers> (get-in (load-template-form @re-frame.db/app-db [:no-op #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647"]) [:forms :template-form])
{:bucket-label "time align", :start {:hour 12, :minute 30}, :pattern-id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "do something in time align", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :bucket-color "#11aa11", :data "{}"}
time-align-mobile.handlers> (helpers/print-data {})
"{}"
time-align-mobile.handlers> (read-string "{}")

{}
time-align-mobile.handlers> (defn save-template-form [{:keys [db]} [_ date-time]]
  (let [template-form (get-in db [:forms :template-form])]
    (try
      (let [new-data            (read-string (:data template-form))
            keys-wanted         (->> template-form
                                     (keys)
                                     (remove #(or (= :bucket-id %)
                                                  (= :bucket-label %)
                                                  (= :bucket-color %)
                                                  (= :pattern-id))))
            new-template        (-> template-form
                                    (merge {:data        new-data
                                            :last-edited date-time})
                                    (select-keys keys-wanted))
            [old-pattern
             old-template]      (select-one [:patterns sp/ALL
                                             (sp/collect-one (sp/submap [:id]))
                                             :templates sp/ALL
                                             #(= (:id %) (:id new-template))] db)
            removed-template-db (setval [:patterns sp/ALL
                                         #(= (:id %) (:id old-pattern))
                                         :templates sp/ALL
                                         #(= (:id %) (:id old-template))]
                                        sp/NONE db)
            new-db              (setval [:patterns sp/ALL
                                         #(= (:id %) (:pattern-id template-form))
                                         :templates
                                         sp/NIL->VECTOR
                                         sp/AFTER-ELEM]
                                        new-template removed-template-db)]

        {:new-data new-data
         :keys-wanted keys-wanted
         :new-template new-template
         :old-pattern old-pattern
         :old-template old-template
         :removed-template-db (select-one [:patterns sp/ALL :templates sp/ALL] removed-template-db)
         :new-db (select-one [:patterns sp/ALL :templates sp/ALL] new-db)}
        ;; {:db       new-db
        ;;  ;; load template form so that the data string gets re-formatted prettier
        ;;  :dispatch [:load-template-form (:id new-template)]}
        )
      (catch js/Error e
        {:db    db
         :alert (str "Failed data read validation " e)}))))
#'time-align-mobile.handlers/save-template-form
time-align-mobile.handlers> (save-template-form {:db new-app-db} [:no-op (js/Date.)])
{:db {:active-filter nil, :time-navigators {:day #inst "2019-04-18T01:12:40.195-00:00", :calendar #inst "2019-04-18T01:12:40.195-00:00", :report #inst "2019-04-18T01:12:40.195-00:00"}, :now #inst "2019-04-18T01:49:12.105-00:00", :config {:auto-log-time-align true}, :filters [{:id #uuid "bbc34081-38d4-4d4f-ab19-a7cef18c1212", :label "sort by bucket label", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort {:path [:bucket-label], :ascending true}, :predicates []} {:id #uuid "aad94081-38d4-4d4f-ab19-a7cef18c1299", :label "sort by label", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:bucket :filter :period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort {:path [:label], :ascending true}, :predicates []} {:id #uuid "cccc4081-38d4-4d4f-ab19-a7cef18c4444", :label "time align bucket filter", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort nil, :predicates [{:path [:bucket-id], :value "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :negate false}]}], :patterns [{:id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :label "an example pattern", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :templates [{:id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "do something in time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :start {:hour 12, :minute 30}, :stop {:hour 14, :minute 0}}]}], :navigation {:current-screen :day, :params nil}, :period-in-play-id #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :buckets [{:id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :color "#11aa11", :periods [{:id #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :label "start using", :planned false, :start #inst "2019-04-18T01:12:40.195-00:00", :stop #inst "2019-04-18T01:49:12.105-00:00", :data {}}]}], :selected-period #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :forms {:bucket-form nil, :period-form nil, :pattern-form nil, :template-form {:bucket-label "time align", :start {:hour 12, :minute 30}, :pattern-id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "new label", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :bucket-color "#11aa11", :data "{}"}, :filter-form nil}}, :alert "Failed data read validation Error: More than one element found in structure: {}"}[:app] Compiling ...
[:app] Build completed. (176 files, 2 compiled, 0 warnings, 0.38s)

time-align-mobile.handlers> (defn save-template-form [{:keys [db]} [_ date-time]]
  (let [template-form (get-in db [:forms :template-form])]
    (try
      (let [new-data            (read-string (:data template-form))
            ;; keys-wanted         (->> template-form
            ;;                          (keys)
            ;;                          (remove #(or (= :bucket-id %)
            ;;                                       (= :bucket-label %)
            ;;                                       (= :bucket-color %)
            ;;                                       (= :pattern-id))))
            ;; new-template        (-> template-form
            ;;                         (merge {:data        new-data
            ;;                                 :last-edited date-time})
            ;;                         (select-keys keys-wanted))
            ;; [old-pattern
            ;;  old-template]      (select-one [:patterns sp/ALL
            ;;                                  (sp/collect-one (sp/submap [:id]))
            ;;                                  :templates sp/ALL
            ;;                                  #(= (:id %) (:id new-template))] db)
            ;; removed-template-db (setval [:patterns sp/ALL
            ;;                              #(= (:id %) (:id old-pattern))
            ;;                              :templates sp/ALL
            ;;                              #(= (:id %) (:id old-template))]
            ;;                             sp/NONE db)
            ;; new-db              (setval [:patterns sp/ALL
            ;;                              #(= (:id %) (:pattern-id template-form))
            ;;                              :templates
            ;;                              sp/NIL->VECTOR
            ;;                              sp/AFTER-ELEM]
            ;;                             new-template removed-template-db)
            ]

        {:new-data new-data
         ;; :keys-wanted keys-wanted
         ;; :new-template new-template
         ;; :old-pattern old-pattern
         ;; :old-template old-template
         ;; :removed-template-db (select-one [:patterns sp/ALL :templates sp/ALL] removed-template-db)
         ;; :new-db (select-one [:patterns sp/ALL :templates sp/ALL] new-db)
         }
        ;; {:db       new-db
        ;;  ;; load template form so that the data string gets re-formatted prettier
        ;;  :dispatch [:load-template-form (:id new-template)]}
        )
      (catch js/Error e
        {:db    db
         :alert (str "Failed data read validation " e)}))))
#'time-align-mobile.handlers/save-template-form
time-align-mobile.handlers> (save-template-form {:db new-app-db} [:no-op (js/Date.)])
WARNING: Use of undeclared Var time-align-mobile.handlers/new-app-db (<stdin> at 1:26)
{:new-data {}}
time-align-mobile.handlers> (defn save-template-form [{:keys [db]} [_ date-time]]
  (let [template-form (get-in db [:forms :template-form])]
    (try
      (let [new-data            (read-string (:data template-form))
            keys-wanted         (->> template-form
                                     (keys)
                                     (remove #(or (= :bucket-id %)
                                                  (= :bucket-label %)
                                                  (= :bucket-color %)
                                                  (= :pattern-id))))
            ;; new-template        (-> template-form
            ;;                         (merge {:data        new-data
            ;;                                 :last-edited date-time})
            ;;                         (select-keys keys-wanted))
            ;; [old-pattern
            ;;  old-template]      (select-one [:patterns sp/ALL
            ;;                                  (sp/collect-one (sp/submap [:id]))
            ;;                                  :templates sp/ALL
            ;;                                  #(= (:id %) (:id new-template))] db)
            ;; removed-template-db (setval [:patterns sp/ALL
            ;;                              #(= (:id %) (:id old-pattern))
            ;;                              :templates sp/ALL
            ;;                              #(= (:id %) (:id old-template))]
            ;;                             sp/NONE db)
            ;; new-db              (setval [:patterns sp/ALL
            ;;                              #(= (:id %) (:pattern-id template-form))
            ;;                              :templates
            ;;                              sp/NIL->VECTOR
            ;;                              sp/AFTER-ELEM]
            ;;                             new-template removed-template-db)
            ]

        {:new-data new-data
         :keys-wanted keys-wanted
         ;; :new-template new-template
         ;; :old-pattern old-pattern
         ;; :old-template old-template
         ;; :removed-template-db (select-one [:patterns sp/ALL :templates sp/ALL] removed-template-db)
         ;; :new-db (select-one [:patterns sp/ALL :templates sp/ALL] new-db)
         }
        ;; {:db       new-db
        ;;  ;; load template form so that the data string gets re-formatted prettier
        ;;  :dispatch [:load-template-form (:id new-template)]}
        )
      (catch js/Error e
        {:db    db
         :alert (str "Failed data read validation " e)}))))
#'time-align-mobile.handlers/save-template-form
time-align-mobile.handlers> (save-template-form {:db new-app-db} [:no-op (js/Date.)])
WARNING: Use of undeclared Var time-align-mobile.handlers/new-app-db (<stdin> at 1:26)
{:new-data {}, :keys-wanted ()}
time-align-mobile.handlers> (defn save-template-form [{:keys [db]} [_ date-time]]
  (let [template-form (get-in db [:forms :template-form])]
    (try
      (let [new-data            (read-string (:data template-form))
            keys-wanted         (->> template-form
                                     (keys)
                                     (remove #(or (= :bucket-id %)
                                                  (= :bucket-label %)
                                                  (= :bucket-color %)
                                                  (= :pattern-id))))
            ;; new-template        (-> template-form
            ;;                         (merge {:data        new-data
            ;;                                 :last-edited date-time})
            ;;                         (select-keys keys-wanted))
            ;; [old-pattern
            ;;  old-template]      (select-one [:patterns sp/ALL
            ;;                                  (sp/collect-one (sp/submap [:id]))
            ;;                                  :templates sp/ALL
            ;;                                  #(= (:id %) (:id new-template))] db)
            ;; removed-template-db (setval [:patterns sp/ALL
            ;;                              #(= (:id %) (:id old-pattern))
            ;;                              :templates sp/ALL
            ;;                              #(= (:id %) (:id old-template))]
            ;;                             sp/NONE db)
            ;; new-db              (setval [:patterns sp/ALL
            ;;                              #(= (:id %) (:pattern-id template-form))
            ;;                              :templates
            ;;                              sp/NIL->VECTOR
            ;;                              sp/AFTER-ELEM]
            ;;                             new-template removed-template-db)
            ]

        {:new-data new-data
         :keys-wanted keys-wanted
         :template-form template-form
         ;; :new-template new-template
         ;; :old-pattern old-pattern
         ;; :old-template old-template
         ;; :removed-template-db (select-one [:patterns sp/ALL :templates sp/ALL] removed-template-db)
         ;; :new-db (select-one [:patterns sp/ALL :templates sp/ALL] new-db)
         }
        ;; {:db       new-db
        ;;  ;; load template form so that the data string gets re-formatted prettier
        ;;  :dispatch [:load-template-form (:id new-template)]}
        )
      (catch js/Error e
        {:db    db
         :alert (str "Failed data read validation " e)}))))
#'time-align-mobile.handlers/save-template-form
time-align-mobile.handlers> (save-template-form {:db new-app-db} [:no-op (js/Date.)])
WARNING: Use of undeclared Var time-align-mobile.handlers/new-app-db (<stdin> at 1:26)
{:new-data {}, :keys-wanted (), :template-form {:bucket-label "time align", :start {:hour 12, :minute 30}, :pattern-id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "new label", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :bucket-color "#11aa11", :data "{}"}}
time-align-mobile.handlers> (defn save-template-form [{:keys [db]} [_ date-time]]
  (let [template-form (get-in db [:forms :template-form])]
    (try
      (let [new-data            (read-string (:data template-form))
            keys-wanted         (->> template-form
                                     (keys)
                                     (remove #(or (= :bucket-id %)
                                                  (= :bucket-label %)
                                                  (= :bucket-color %)
                                                  (= :pattern-id %))))
            ;; new-template        (-> template-form
            ;;                         (merge {:data        new-data
            ;;                                 :last-edited date-time})
            ;;                         (select-keys keys-wanted))
            ;; [old-pattern
            ;;  old-template]      (select-one [:patterns sp/ALL
            ;;                                  (sp/collect-one (sp/submap [:id]))
            ;;                                  :templates sp/ALL
            ;;                                  #(= (:id %) (:id new-template))] db)
            ;; removed-template-db (setval [:patterns sp/ALL
            ;;                              #(= (:id %) (:id old-pattern))
            ;;                              :templates sp/ALL
            ;;                              #(= (:id %) (:id old-template))]
            ;;                             sp/NONE db)
            ;; new-db              (setval [:patterns sp/ALL
            ;;                              #(= (:id %) (:pattern-id template-form))
            ;;                              :templates
            ;;                              sp/NIL->VECTOR
            ;;                              sp/AFTER-ELEM]
            ;;                             new-template removed-template-db)
            ]

        {:new-data new-data
         :keys-wanted keys-wanted
         :template-form template-form
         ;; :new-template new-template
         ;; :old-pattern old-pattern
         ;; :old-template old-template
         ;; :removed-template-db (select-one [:patterns sp/ALL :templates sp/ALL] removed-template-db)
         ;; :new-db (select-one [:patterns sp/ALL :templates sp/ALL] new-db)
         }
        ;; {:db       new-db
        ;;  ;; load template form so that the data string gets re-formatted prettier
        ;;  :dispatch [:load-template-form (:id new-template)]}
        )
      (catch js/Error e
        {:db    db
         :alert (str "Failed data read validation " e)}))))
#'time-align-mobile.handlers/save-template-form
time-align-mobile.handlers> (save-template-form {:db new-app-db} [:no-op (js/Date.)])
WARNING: Use of undeclared Var time-align-mobile.handlers/new-app-db (<stdin> at 1:26)
{:new-data {}, :keys-wanted (:start :created :stop :label :id :last-edited :data), :template-form {:bucket-label "time align", :start {:hour 12, :minute 30}, :pattern-id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "new label", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :bucket-color "#11aa11", :data "{}"}}
time-align-mobile.handlers> (defn save-template-form [{:keys [db]} [_ date-time]]
  (let [template-form (get-in db [:forms :template-form])]
    (try
      (let [new-data            (read-string (:data template-form))
            keys-wanted         (->> template-form
                                     (keys)
                                     (remove #(or (= :bucket-id %)
                                                  (= :bucket-label %)
                                                  (= :bucket-color %)
                                                  (= :pattern-id %))))
            new-template        (-> template-form
                                    (merge {:data        new-data
                                            :last-edited date-time})
                                    (select-keys keys-wanted))
            [old-pattern
             old-template]      (select-one [:patterns sp/ALL
                                             (sp/collect-one (sp/submap [:id]))
                                             :templates sp/ALL
                                             #(= (:id %) (:id new-template))] db)
            removed-template-db (setval [:patterns sp/ALL
                                         #(= (:id %) (:id old-pattern))
                                         :templates sp/ALL
                                         #(= (:id %) (:id old-template))]
                                        sp/NONE db)
            new-db              (setval [:patterns sp/ALL
                                         #(= (:id %) (:pattern-id template-form))
                                         :templates
                                         sp/NIL->VECTOR
                                         sp/AFTER-ELEM]
                                        new-template removed-template-db)
            ]

        {:new-data new-data
         :keys-wanted keys-wanted
         :template-form template-form
         :new-template new-template
         :old-pattern old-pattern
         :old-template old-template
         :removed-template-db (select-one [:patterns sp/ALL :templates sp/ALL] removed-template-db)
         :new-db (select-one [:patterns sp/ALL :templates sp/ALL] new-db)
         }
        ;; {:db       new-db
        ;;  ;; load template form so that the data string gets re-formatted prettier
        ;;  :dispatch [:load-template-form (:id new-template)]}
        )
      (catch js/Error e
        {:db    db
         :alert (str "Failed data read validation " e)}))))
#'time-align-mobile.handlers/save-template-form
time-align-mobile.handlers> (save-template-form {:db new-app-db} [:no-op (js/Date.)])
WARNING: Use of undeclared Var time-align-mobile.handlers/new-app-db (<stdin> at 1:26)
{:new-data {}, :keys-wanted (:start :created :stop :label :id :last-edited :data), :template-form {:bucket-label "time align", :start {:hour 12, :minute 30}, :pattern-id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "new label", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :bucket-color "#11aa11", :data "{}"}, :new-template {:start {:hour 12, :minute 30}, :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "new label", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T14:18:23.386-00:00", :data {}}, :old-pattern {:id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465"}, :old-template {:id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "do something in time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :start {:hour 12, :minute 30}, :stop {:hour 14, :minute 0}}, :removed-template-db nil, :new-db {:start {:hour 12, :minute 30}, :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "new label", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T14:18:23.386-00:00", :data {}}}
time-align-mobile.handlers> (defn save-template-form [{:keys [db]} [_ date-time]]
  (let [template-form (get-in db [:forms :template-form])]
    (try
      (let [new-data            (read-string (:data template-form))
            keys-wanted         (->> template-form
                                     (keys)
                                     (remove #(or (= :bucket-id %)
                                                  (= :bucket-label %)
                                                  (= :bucket-color %)
                                                  (= :pattern-id %))))
            new-template        (-> template-form
                                    (merge {:data        new-data
                                            :last-edited date-time})
                                    (select-keys keys-wanted))
            [old-pattern
             old-template]      (select-one [:patterns sp/ALL
                                             (sp/collect-one (sp/submap [:id]))
                                             :templates sp/ALL
                                             #(= (:id %) (:id new-template))] db)
            removed-template-db (setval [:patterns sp/ALL
                                         #(= (:id %) (:id old-pattern))
                                         :templates sp/ALL
                                         #(= (:id %) (:id old-template))]
                                        sp/NONE db)
            new-db              (setval [:patterns sp/ALL
                                         #(= (:id %) (:pattern-id template-form))
                                         :templates
                                         sp/NIL->VECTOR
                                         sp/AFTER-ELEM]
                                        new-template removed-template-db)
            ]

        {:new-data new-data
         :keys-wanted keys-wanted
         :template-form template-form
         :new-template new-template
         :old-pattern old-pattern
         :old-template old-template
         :removed-template-db (select-one [:patterns sp/ALL ] removed-template-db)
         :new-db (select-one [:patterns sp/ALL :templates sp/ALL] new-db)
         }
        ;; {:db       new-db
        ;;  ;; load template form so that the data string gets re-formatted prettier
        ;;  :dispatch [:load-template-form (:id new-template)]}
        )
      (catch js/Error e
        {:db    db
         :alert (str "Failed data read validation " e)}))))
#'time-align-mobile.handlers/save-template-form
time-align-mobile.handlers> (save-template-form {:db new-app-db} [:no-op (js/Date.)])
WARNING: Use of undeclared Var time-align-mobile.handlers/new-app-db (<stdin> at 1:26)
{:new-data {}, :keys-wanted (:start :created :stop :label :id :last-edited :data), :template-form {:bucket-label "time align", :start {:hour 12, :minute 30}, :pattern-id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "new label", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :bucket-color "#11aa11", :data "{}"}, :new-template {:start {:hour 12, :minute 30}, :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "new label", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T14:19:18.918-00:00", :data {}}, :old-pattern {:id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465"}, :old-template {:id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "do something in time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :start {:hour 12, :minute 30}, :stop {:hour 14, :minute 0}}, :removed-template-db {:id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :label "an example pattern", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :templates []}, :new-db {:start {:hour 12, :minute 30}, :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "new label", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T14:19:18.918-00:00", :data {}}}
time-align-mobile.handlers> (defn save-template-form [{:keys [db]} [_ date-time]]
  (let [template-form (get-in db [:forms :template-form])]
    (try
      (let [new-data            (read-string (:data template-form))
            keys-wanted         (->> template-form
                                     (keys)
                                     (remove #(or (= :bucket-id %)
                                                  (= :bucket-label %)
                                                  (= :bucket-color %)
                                                  (= :pattern-id %))))
            new-template        (-> template-form
                                    (merge {:data        new-data
                                            :last-edited date-time})
                                    (select-keys keys-wanted))
            [old-pattern
             old-template]      (select-one [:patterns sp/ALL
                                             (sp/collect-one (sp/submap [:id]))
                                             :templates sp/ALL
                                             #(= (:id %) (:id new-template))] db)
            removed-template-db (setval [:patterns sp/ALL
                                         #(= (:id %) (:id old-pattern))
                                         :templates sp/ALL
                                         #(= (:id %) (:id old-template))]
                                        sp/NONE db)
            new-db              (setval [:patterns sp/ALL
                                         #(= (:id %) (:pattern-id template-form))
                                         :templates
                                         sp/NIL->VECTOR
                                         sp/AFTER-ELEM]
                                        new-template removed-template-db)]

        {:db       new-db
         ;; load template form so that the data string gets re-formatted prettier
         :dispatch [:load-template-form (:id new-template)]})
      (catch js/Error e
        {:db    db
         :alert (str "Failed data read validation " e)}))))
#'time-align-mobile.handlers/save-template-form
time-align-mobile.handlers> (save-template-form {:db new-app-db} [:no-op (js/Date.)])
WARNING: Use of undeclared Var time-align-mobile.handlers/new-app-db (<stdin> at 1:26)
{:db {:active-filter nil, :time-navigators {:day #inst "2019-04-18T01:12:40.195-00:00", :calendar #inst "2019-04-18T01:12:40.195-00:00", :report #inst "2019-04-18T01:12:40.195-00:00"}, :now #inst "2019-04-18T01:49:12.105-00:00", :config {:auto-log-time-align true}, :filters [{:id #uuid "bbc34081-38d4-4d4f-ab19-a7cef18c1212", :label "sort by bucket label", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort {:path [:bucket-label], :ascending true}, :predicates []} {:id #uuid "aad94081-38d4-4d4f-ab19-a7cef18c1299", :label "sort by label", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:bucket :filter :period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort {:path [:label], :ascending true}, :predicates []} {:id #uuid "cccc4081-38d4-4d4f-ab19-a7cef18c4444", :label "time align bucket filter", :created #inst "2019-04-18T01:12:40.195-00:00", :compatible [:period :template], :last-edited #inst "2019-04-18T01:12:40.195-00:00", :sort nil, :predicates [{:path [:bucket-id], :value "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :negate false}]}], :patterns [{:id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :label "an example pattern", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :templates [{:start {:hour 12, :minute 30}, :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "new label", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T14:20:10.898-00:00", :data {}}]}], :navigation {:current-screen :day, :params nil}, :period-in-play-id #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :buckets [{:id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :label "time align", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :data {}, :color "#11aa11", :periods [{:id #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :created #inst "2019-04-18T01:12:40.195-00:00", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :label "start using", :planned false, :start #inst "2019-04-18T01:12:40.195-00:00", :stop #inst "2019-04-18T01:49:12.105-00:00", :data {}}]}], :selected-period #uuid "a8404f81-38d4-4d4f-ab19-a7cef18c4531", :forms {:bucket-form nil, :period-form nil, :pattern-form nil, :template-form {:bucket-label "time align", :start {:hour 12, :minute 30}, :pattern-id #uuid "ffa49881-38d4-4d4f-ab19-a7cef18c4465", :created #inst "2019-04-18T01:12:40.195-00:00", :stop {:hour 14, :minute 0}, :label "new label", :id #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647", :last-edited #inst "2019-04-18T01:12:40.195-00:00", :bucket-id #uuid "a7396f81-38d4-4d4f-ab19-a7cef18c4ea2", :bucket-color "#11aa11", :data "{}"}, :filter-form nil}}, :dispatch [:load-template-form #uuid "bb9b9881-38d4-4d4f-ab19-a7cef18c6647"]}
time-align-mobile.handlers> (select-one [:patterns sp/ALL :templates sp/FIRST :label] (save-template-form {:db new-app-db} [:no-op (js/Date.)]))
WARNING: Use of undeclared Var time-align-mobile.handlers/new-app-db (<stdin> at 1:84)
nil
time-align-mobile.handlers> (= "new label" (select-one [:db :patterns sp/ALL :templates sp/FIRST :label] (save-template-form {:db new-app-db} [:no-op (js/Date.)])))
WARNING: Use of undeclared Var time-align-mobile.handlers/new-app-db (<stdin> at 1:103)
true
time-align-mobile.handlers> 